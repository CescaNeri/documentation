const local_index = {"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"documentation Documentation reports and diagrams","title":"documentation"},{"location":"index.html#documentation","text":"Documentation reports and diagrams","title":"documentation"},{"location":"Architecture%20Design.html","text":"Architecture Design Microservices Service Architecture Domain Layer This is the core layer of any service and is responsible of defining all Entities belonging to the service and their associated behaviors. This layer can also define high level processes or constraints that are encapsulated inside Domain Services . Entities and domain services can notify the occurrence of any relevant state change using Domain Events . Contracts Layer Defines a set of External Events that are used by other microservices to react to state changes outside of their bounded context. These events are typically emitted by the Application Layer in response to internal domain events and expose a subset of the properties of the domain event itself. Application Layer Defines a collection of Handlers that encapsulate the use cases exposed by the service and acts as an entry point to the domain layer. This layer is also responsible of managing Authorization , data access, consistency and external communication by delegating to the Infrastructure Layer . To keep application logic as clean as possible, this communication uses Infrastructure Interfaces declared by the application layer itself, but implemented in Infrastructure . Infrastructure Layer This layer holds the concrete implementation of the technology-agnostic interfaces declared by the Application Layer or by the Domain Layer . These interfaces typically model behavior related to Persistence , External Communication and other Utility Services required by other layers. API Layer Represents the entry point that clients of the service use to make requests. Clients can make requests using the REST API exposed by each microservice, therefore this layer defines a set of Controllers that declare which endpoints are supported. In addition, this is where each service defines its DTOs (Data Transfer Objects, i.e. the objects modeling the format of communication with clients). Lastly, this layer is responsible of managing the Authentication process, delegating authorization to the Application Layer . Inter-Service dependencies Inter-service communication can happen with: Synchronous API calls from the Infrastructure layer to the recipient API layer Asynchronous Event notification received through the Application layer that adheres to the sender Contracts layer Global Architecture Deployment Diagram","title":"Architecture Design"},{"location":"Architecture%20Design.html#architecture-design","text":"","title":"Architecture Design"},{"location":"Architecture%20Design.html#microservices","text":"","title":"Microservices"},{"location":"Architecture%20Design.html#service-architecture","text":"","title":"Service Architecture"},{"location":"Architecture%20Design.html#domain-layer","text":"This is the core layer of any service and is responsible of defining all Entities belonging to the service and their associated behaviors. This layer can also define high level processes or constraints that are encapsulated inside Domain Services . Entities and domain services can notify the occurrence of any relevant state change using Domain Events .","title":"Domain Layer"},{"location":"Architecture%20Design.html#contracts-layer","text":"Defines a set of External Events that are used by other microservices to react to state changes outside of their bounded context. These events are typically emitted by the Application Layer in response to internal domain events and expose a subset of the properties of the domain event itself.","title":"Contracts Layer"},{"location":"Architecture%20Design.html#application-layer","text":"Defines a collection of Handlers that encapsulate the use cases exposed by the service and acts as an entry point to the domain layer. This layer is also responsible of managing Authorization , data access, consistency and external communication by delegating to the Infrastructure Layer . To keep application logic as clean as possible, this communication uses Infrastructure Interfaces declared by the application layer itself, but implemented in Infrastructure .","title":"Application Layer"},{"location":"Architecture%20Design.html#infrastructure-layer","text":"This layer holds the concrete implementation of the technology-agnostic interfaces declared by the Application Layer or by the Domain Layer . These interfaces typically model behavior related to Persistence , External Communication and other Utility Services required by other layers.","title":"Infrastructure Layer"},{"location":"Architecture%20Design.html#api-layer","text":"Represents the entry point that clients of the service use to make requests. Clients can make requests using the REST API exposed by each microservice, therefore this layer defines a set of Controllers that declare which endpoints are supported. In addition, this is where each service defines its DTOs (Data Transfer Objects, i.e. the objects modeling the format of communication with clients). Lastly, this layer is responsible of managing the Authentication process, delegating authorization to the Application Layer .","title":"API Layer"},{"location":"Architecture%20Design.html#inter-service-dependencies","text":"Inter-service communication can happen with: Synchronous API calls from the Infrastructure layer to the recipient API layer Asynchronous Event notification received through the Application layer that adheres to the sender Contracts layer","title":"Inter-Service dependencies"},{"location":"Architecture%20Design.html#global-architecture","text":"","title":"Global Architecture"},{"location":"Architecture%20Design.html#deployment-diagram","text":"","title":"Deployment Diagram"},{"location":"Domain%20Analysis.html","text":"Domain Analysis Impact Mapping Subdomain & Context Analysis E-Scooter Subdomain Core Subdomain Scooter Monitor Context One of the core contexts. Responsible for keeping track of scooter positions, battery level and other useful data coming from the physical devices. Scooter Control Context Responsible for keeping track of the scooter logic state, meaning managing the properties of being locked/unlocked and enabled/disabled. Provides all the operations on the scooter state to other contexts and it's considered the ground truth on this data. Also responsible for defining control policies and apply them operating on the Physical Control, like power save, max speed, that depend only on the scooter physical state. Scooter Physical Control Context Responsible for physical actuation of all the remote operations on the scooter. Area of Service Context Keeps track of service areas, scooter-area bindings and scooter position in order to detect escapes. Scooter Data Context Storage of e-scooters technical and logical static information, like ID, serial number, dimensions, weight... Rent Subdomain Core Subdomain Rent Context Manages the renting operations including storing data on which scooters are rented and by whom. Provides the interface for searching and renting scooters and communicates with the State Context in order to update the state when needed. Trip Context Data collection about trips done by all customers such as starting points, duration, kilometers. Rent Payment Context Responsible for managing the payment policy for customer rents. Insight Subdomain Core Subdomain Drop points Planning Context Exploits usage data from other contexts to compute drop point locations or suggestions. Stores data about user search requests coming to the Rent Context. Payment Subdomain Supporting Subdomain Payment Context Manages all customer in-app transactions, virtual currency, and triggers real-world transactions. User Subdomain Generic Subdomain Customer Context Keeps track of customers anagraphic data. Authorization Context Manages login data and role based authorization for all agents, including employees and customers. Context Map","title":"Domain Analysis"},{"location":"Domain%20Analysis.html#domain-analysis","text":"","title":"Domain Analysis"},{"location":"Domain%20Analysis.html#impact-mapping","text":"","title":"Impact Mapping"},{"location":"Domain%20Analysis.html#subdomain-context-analysis","text":"","title":"Subdomain &amp; Context Analysis"},{"location":"Domain%20Analysis.html#e-scooter-subdomain","text":"Core Subdomain","title":"E-Scooter Subdomain"},{"location":"Domain%20Analysis.html#scooter-monitor-context","text":"One of the core contexts. Responsible for keeping track of scooter positions, battery level and other useful data coming from the physical devices.","title":"Scooter Monitor Context"},{"location":"Domain%20Analysis.html#scooter-control-context","text":"Responsible for keeping track of the scooter logic state, meaning managing the properties of being locked/unlocked and enabled/disabled. Provides all the operations on the scooter state to other contexts and it's considered the ground truth on this data. Also responsible for defining control policies and apply them operating on the Physical Control, like power save, max speed, that depend only on the scooter physical state.","title":"Scooter Control Context"},{"location":"Domain%20Analysis.html#scooter-physical-control-context","text":"Responsible for physical actuation of all the remote operations on the scooter.","title":"Scooter Physical Control Context"},{"location":"Domain%20Analysis.html#area-of-service-context","text":"Keeps track of service areas, scooter-area bindings and scooter position in order to detect escapes.","title":"Area of Service Context"},{"location":"Domain%20Analysis.html#scooter-data-context","text":"Storage of e-scooters technical and logical static information, like ID, serial number, dimensions, weight...","title":"Scooter Data Context"},{"location":"Domain%20Analysis.html#rent-subdomain","text":"Core Subdomain","title":"Rent Subdomain"},{"location":"Domain%20Analysis.html#rent-context","text":"Manages the renting operations including storing data on which scooters are rented and by whom. Provides the interface for searching and renting scooters and communicates with the State Context in order to update the state when needed.","title":"Rent Context"},{"location":"Domain%20Analysis.html#trip-context","text":"Data collection about trips done by all customers such as starting points, duration, kilometers.","title":"Trip Context"},{"location":"Domain%20Analysis.html#rent-payment-context","text":"Responsible for managing the payment policy for customer rents.","title":"Rent Payment Context"},{"location":"Domain%20Analysis.html#insight-subdomain","text":"Core Subdomain","title":"Insight Subdomain"},{"location":"Domain%20Analysis.html#drop-points-planning-context","text":"Exploits usage data from other contexts to compute drop point locations or suggestions. Stores data about user search requests coming to the Rent Context.","title":"Drop points Planning Context"},{"location":"Domain%20Analysis.html#payment-subdomain","text":"Supporting Subdomain","title":"Payment Subdomain"},{"location":"Domain%20Analysis.html#payment-context","text":"Manages all customer in-app transactions, virtual currency, and triggers real-world transactions.","title":"Payment Context"},{"location":"Domain%20Analysis.html#user-subdomain","text":"Generic Subdomain","title":"User Subdomain"},{"location":"Domain%20Analysis.html#customer-context","text":"Keeps track of customers anagraphic data.","title":"Customer Context"},{"location":"Domain%20Analysis.html#authorization-context","text":"Manages login data and role based authorization for all agents, including employees and customers.","title":"Authorization Context"},{"location":"Domain%20Analysis.html#context-map","text":"","title":"Context Map"},{"location":"Implementation.html","text":"Implementation Microservices Microsoft Azure Naming Convention Every resource is under the e-scooter group; The Scooter Physical Control IoT Hub is named scooter-iot-hub The Scooter Monitor Digital Twin is named scooter-digital-twins The Scooter Event Bus is named scooter-event-bus The topic used for events generated from any microservice is named dev/service-events Every subscription name is in kebab case and should be named after the subscriber name inside Azure Azure Functions should be named after verbs and in kebab case The Scooter Event Grid is named scooter-event-grid","title":"Implementation"},{"location":"Implementation.html#implementation","text":"","title":"Implementation"},{"location":"Implementation.html#microservices","text":"","title":"Microservices"},{"location":"Implementation.html#microsoft-azure","text":"","title":"Microsoft Azure"},{"location":"Implementation.html#naming-convention","text":"Every resource is under the e-scooter group; The Scooter Physical Control IoT Hub is named scooter-iot-hub The Scooter Monitor Digital Twin is named scooter-digital-twins The Scooter Event Bus is named scooter-event-bus The topic used for events generated from any microservice is named dev/service-events Every subscription name is in kebab case and should be named after the subscriber name inside Azure Azure Functions should be named after verbs and in kebab case The Scooter Event Grid is named scooter-event-grid","title":"Naming Convention"},{"location":"Ubiquitous%20Language.html","text":"Ubiquitous Language E-Scooter service A service that allows customers to rent electric scooters placed in public areas for a trip within the boundaries of an area of service . Electric Scooter Alias: e-scooter, scooter Motorized vehicle with two wheels, usable by a person standing on it. It's equipped with some sensors and other devices. E-Scooter equipment Electric engine Uses power from the battery to power the front wheel spin. Wheels and tires The scooter runs on two wheels with air-inflated tires; the front wheel containes a rotating electric engine . Battery Scooter power supply; rechargeable; electric; has finite capacity, power... GPS sensor Global Positioning System; estimates a position on Earth by negotiating it with satellites; based on a free service; works better in open places Speedometer Measures wheel rounds per second Accelerometer Measures acceleration forces along the three axis Electronic wheel block Alias: electric break, electric block If turned on, the wheel becomes very hard to rotate Headlight Light source embedded in the front to enable night usage Manual Breaks Alias: Breaks, default breaks, disk breaks, rear break Friction based stopping system; Placed on the back wheel; Controlled by a hand lever. Accelerator Handle that controls the speed; If the handle isn't turned the electric break is activated. Speaker A device that can play sounds and can be remotely activated. Mode Alias: State One of the possible states in which the scooter can be. In each mode, the scooter has a different behavior. Active mode A mode in which the scooter has no electric limit on power. Power Saving mode A mode in which the scooter uses electrically limited power in order to save battery. This happens after the battery gets below a threshold Power Saving threshold The battery level below which the scooter enters Power Saving mode. Standby mode A mode in which the scooter is disabled due to extremely low battery. Standby threshold The battery level below which the scooter enters Standby mode. Operations Unlock To turn off the electric block Lock To turn on the electric block . Ride Use the scooter to move. Disable To deny the possibility that a customer pays for unlocking the scooter. Enable To allow the possibility that a customer pays for unlocking the scooter, if the rent business policies allow it. Maintain Repair any damage and/or recharge the battery. Rent As a customer , paying or exploiting a subscription for unlocking an e-scooter . This action lasts until the scooter is locked again (in normal conditions). Assign to area An e-scooter can be assigned to an area if, from that moment, that e-scooter mutually exclusively belongs to that area . Recover See recovery . Ring Make the speaker play a ringtone, useful to find it. Relationships Belong to area The e-scooter can be only rented inside that area . Customer A customer for the e-scooter service . Anagraphic information Collection of data about the customer, including first name, date of birth, and all the other possible information useful for the e-scooter service . Subscription A customer has it if they are able to rent e-scooters without paying upfront. Recovery The act of picking up an e-scooter , providing maintenance and dropping it somewhere inside the area of service sometime later. The scooter may be unlocked if necessary. Recovery assistant Alias: assistant, employee. Works for the e-scooter service and does recoveries with a recovery van . Recovery van A vehicle that allows assistants to recover e-scooters . Map Bidimensional, polar representation of the Earth surface. Shows, for example, streets, buildings, water courses; what scooters can or cannot cross. Area of service Alias: Service Area The map portion inside which e-scooters assigned to it can be rented. Drop Point A place of interest, inside an area of service, where electric scooter are usually dropped after recovery . Trip Information about a rent period, during and after its lasting. Properties Rider The rider is the customer that rents the e-scooter during the trip. Vehicle The scooter used for transportation. Distance The distance, in meters, traveled during the trip. Start position Alias: start A point inside the area of service where the vehicle was unlocked . End position Alias: end A point inside the map where the vehicle was locked because the rent ended. Payment A payment can be either: - a real-world payment - an in-app payment Payment legacy system The preexisting service that manages customer data and payments for the e-scooter service . Virtual Currency The amount of imaginary money for every customer. Used to pay scooter rents . It can be obtained through real-world purchases . In-App Payment Alias: in-app purchase It's a virtual currency transaction inside the system. Real-world payment Alias: real-world purchase It's a money transaction from the customer to the business bank account.","title":"Ubiquitous Language"},{"location":"Ubiquitous%20Language.html#ubiquitous-language","text":"","title":"Ubiquitous Language"},{"location":"Ubiquitous%20Language.html#e-scooter-service","text":"A service that allows customers to rent electric scooters placed in public areas for a trip within the boundaries of an area of service .","title":"E-Scooter service"},{"location":"Ubiquitous%20Language.html#electric-scooter","text":"Alias: e-scooter, scooter Motorized vehicle with two wheels, usable by a person standing on it. It's equipped with some sensors and other devices.","title":"Electric Scooter"},{"location":"Ubiquitous%20Language.html#e-scooter-equipment","text":"","title":"E-Scooter equipment"},{"location":"Ubiquitous%20Language.html#electric-engine","text":"Uses power from the battery to power the front wheel spin.","title":"Electric engine"},{"location":"Ubiquitous%20Language.html#wheels-and-tires","text":"The scooter runs on two wheels with air-inflated tires; the front wheel containes a rotating electric engine .","title":"Wheels and tires"},{"location":"Ubiquitous%20Language.html#battery","text":"Scooter power supply; rechargeable; electric; has finite capacity, power...","title":"Battery"},{"location":"Ubiquitous%20Language.html#gps-sensor","text":"Global Positioning System; estimates a position on Earth by negotiating it with satellites; based on a free service; works better in open places","title":"GPS sensor"},{"location":"Ubiquitous%20Language.html#speedometer","text":"Measures wheel rounds per second","title":"Speedometer"},{"location":"Ubiquitous%20Language.html#accelerometer","text":"Measures acceleration forces along the three axis","title":"Accelerometer"},{"location":"Ubiquitous%20Language.html#electronic-wheel-block","text":"Alias: electric break, electric block If turned on, the wheel becomes very hard to rotate","title":"Electronic wheel block"},{"location":"Ubiquitous%20Language.html#headlight","text":"Light source embedded in the front to enable night usage","title":"Headlight"},{"location":"Ubiquitous%20Language.html#manual-breaks","text":"Alias: Breaks, default breaks, disk breaks, rear break Friction based stopping system; Placed on the back wheel; Controlled by a hand lever.","title":"Manual Breaks"},{"location":"Ubiquitous%20Language.html#accelerator","text":"Handle that controls the speed; If the handle isn't turned the electric break is activated.","title":"Accelerator"},{"location":"Ubiquitous%20Language.html#speaker","text":"A device that can play sounds and can be remotely activated.","title":"Speaker"},{"location":"Ubiquitous%20Language.html#mode","text":"Alias: State One of the possible states in which the scooter can be. In each mode, the scooter has a different behavior.","title":"Mode"},{"location":"Ubiquitous%20Language.html#active-mode","text":"A mode in which the scooter has no electric limit on power.","title":"Active mode"},{"location":"Ubiquitous%20Language.html#power-saving-mode","text":"A mode in which the scooter uses electrically limited power in order to save battery. This happens after the battery gets below a threshold","title":"Power Saving mode"},{"location":"Ubiquitous%20Language.html#power-saving-threshold","text":"The battery level below which the scooter enters Power Saving mode.","title":"Power Saving threshold"},{"location":"Ubiquitous%20Language.html#standby-mode","text":"A mode in which the scooter is disabled due to extremely low battery.","title":"Standby mode"},{"location":"Ubiquitous%20Language.html#standby-threshold","text":"The battery level below which the scooter enters Standby mode.","title":"Standby threshold"},{"location":"Ubiquitous%20Language.html#operations","text":"","title":"Operations"},{"location":"Ubiquitous%20Language.html#unlock","text":"To turn off the electric block","title":"Unlock"},{"location":"Ubiquitous%20Language.html#lock","text":"To turn on the electric block .","title":"Lock"},{"location":"Ubiquitous%20Language.html#ride","text":"Use the scooter to move.","title":"Ride"},{"location":"Ubiquitous%20Language.html#disable","text":"To deny the possibility that a customer pays for unlocking the scooter.","title":"Disable"},{"location":"Ubiquitous%20Language.html#enable","text":"To allow the possibility that a customer pays for unlocking the scooter, if the rent business policies allow it.","title":"Enable"},{"location":"Ubiquitous%20Language.html#maintain","text":"Repair any damage and/or recharge the battery.","title":"Maintain"},{"location":"Ubiquitous%20Language.html#rent","text":"As a customer , paying or exploiting a subscription for unlocking an e-scooter . This action lasts until the scooter is locked again (in normal conditions).","title":"Rent"},{"location":"Ubiquitous%20Language.html#assign-to-area","text":"An e-scooter can be assigned to an area if, from that moment, that e-scooter mutually exclusively belongs to that area .","title":"Assign to area"},{"location":"Ubiquitous%20Language.html#recover","text":"See recovery .","title":"Recover"},{"location":"Ubiquitous%20Language.html#ring","text":"Make the speaker play a ringtone, useful to find it.","title":"Ring"},{"location":"Ubiquitous%20Language.html#relationships","text":"","title":"Relationships"},{"location":"Ubiquitous%20Language.html#belong-to-area","text":"The e-scooter can be only rented inside that area .","title":"Belong to area"},{"location":"Ubiquitous%20Language.html#customer","text":"A customer for the e-scooter service .","title":"Customer"},{"location":"Ubiquitous%20Language.html#anagraphic-information","text":"Collection of data about the customer, including first name, date of birth, and all the other possible information useful for the e-scooter service .","title":"Anagraphic information"},{"location":"Ubiquitous%20Language.html#subscription","text":"A customer has it if they are able to rent e-scooters without paying upfront.","title":"Subscription"},{"location":"Ubiquitous%20Language.html#recovery","text":"The act of picking up an e-scooter , providing maintenance and dropping it somewhere inside the area of service sometime later. The scooter may be unlocked if necessary.","title":"Recovery"},{"location":"Ubiquitous%20Language.html#recovery-assistant","text":"Alias: assistant, employee. Works for the e-scooter service and does recoveries with a recovery van .","title":"Recovery assistant"},{"location":"Ubiquitous%20Language.html#recovery-van","text":"A vehicle that allows assistants to recover e-scooters .","title":"Recovery van"},{"location":"Ubiquitous%20Language.html#map","text":"Bidimensional, polar representation of the Earth surface. Shows, for example, streets, buildings, water courses; what scooters can or cannot cross.","title":"Map"},{"location":"Ubiquitous%20Language.html#area-of-service","text":"Alias: Service Area The map portion inside which e-scooters assigned to it can be rented.","title":"Area of service"},{"location":"Ubiquitous%20Language.html#drop-point","text":"A place of interest, inside an area of service, where electric scooter are usually dropped after recovery .","title":"Drop Point"},{"location":"Ubiquitous%20Language.html#trip","text":"Information about a rent period, during and after its lasting.","title":"Trip"},{"location":"Ubiquitous%20Language.html#properties","text":"","title":"Properties"},{"location":"Ubiquitous%20Language.html#rider","text":"The rider is the customer that rents the e-scooter during the trip.","title":"Rider"},{"location":"Ubiquitous%20Language.html#vehicle","text":"The scooter used for transportation.","title":"Vehicle"},{"location":"Ubiquitous%20Language.html#distance","text":"The distance, in meters, traveled during the trip.","title":"Distance"},{"location":"Ubiquitous%20Language.html#start-position","text":"Alias: start A point inside the area of service where the vehicle was unlocked .","title":"Start position"},{"location":"Ubiquitous%20Language.html#end-position","text":"Alias: end A point inside the map where the vehicle was locked because the rent ended.","title":"End position"},{"location":"Ubiquitous%20Language.html#payment","text":"A payment can be either: - a real-world payment - an in-app payment","title":"Payment"},{"location":"Ubiquitous%20Language.html#payment-legacy-system","text":"The preexisting service that manages customer data and payments for the e-scooter service .","title":"Payment legacy system"},{"location":"Ubiquitous%20Language.html#virtual-currency","text":"The amount of imaginary money for every customer. Used to pay scooter rents . It can be obtained through real-world purchases .","title":"Virtual Currency"},{"location":"Ubiquitous%20Language.html#in-app-payment","text":"Alias: in-app purchase It's a virtual currency transaction inside the system.","title":"In-App Payment"},{"location":"Ubiquitous%20Language.html#real-world-payment","text":"Alias: real-world purchase It's a money transaction from the customer to the business bank account.","title":"Real-world payment"},{"location":"Use%20Cases.html","text":"Use Cases User stories Some user stories are taken from end users and some other are taken from the business representative, business employees. 1a - Search of a scooter As a customer, I want to open the mobile application and search for free scooters in my area. 1b - Choose and find a scooter As a customer, I want to be able to select a scooter near myself and make it ring in order to find it if it's hidden. 1c - Rent a scooter As a customer, I want to confirm on my phone and start riding. When I'm done, I want to leave the scooter where I can and confirm the end of the trip on the app. 2 - Battery level As a customer, when I'm searching a scooter, I want to know its battery level in advance. 3a - Area of service policy When a scooter is taken out of the area of service borders, it locks. 3b - Customer notification of the area border As a customer, when I'm approaching the area of service border, I want to be warned about the possibility that my scooter gets locked. How do you want to get warned? I'd like the scooter to play a specific sound, while I get a notification on my phone. 4 - Power save policy When the battery goes below a threshold, the scooter enters a power save mode, during which it runs slower than normal. 5 - Customer notification of battery usage As a customer, I want to be warned when the battery is running low. I want to be warned with a ringtone. 6 - Battery exhausted policy When the battery is running low, the scooter warns the customer, if present, that the run must end and enters a standby mode during which it's disabled. 7 - Monitoring of scooters As the business manager, I want to be able to see the position and the battery level of every scooter in a map. 8 - Insights from the system As the business manager, I want to get suggestions about strategic places for the drop points of the next day. 9 - Unlock policy for employees. As a business employee I want to be able to unlock freely the scooters in order to move them. 10 - Vandalism prevention The scooter should discourage theft and vandalism by playing a message when moved while locked or disabled. 11 - Integration with legacy payment system As the business manager, I want the customers to pay for rides through the existing system. Does the legacy system keep track of all customers data? If I remember correctly, yes. From the legacy system documentation: The legacy payment system needs access to trip data and to customers rent/unlock requests. Use Case Diagram Story Diagrams Story #1 Diagram","title":"Use Cases"},{"location":"Use%20Cases.html#use-cases","text":"","title":"Use Cases"},{"location":"Use%20Cases.html#user-stories","text":"Some user stories are taken from end users and some other are taken from the business representative, business employees.","title":"User stories"},{"location":"Use%20Cases.html#1a-search-of-a-scooter","text":"As a customer, I want to open the mobile application and search for free scooters in my area.","title":"1a - Search of a scooter"},{"location":"Use%20Cases.html#1b-choose-and-find-a-scooter","text":"As a customer, I want to be able to select a scooter near myself and make it ring in order to find it if it's hidden.","title":"1b - Choose and find a scooter"},{"location":"Use%20Cases.html#1c-rent-a-scooter","text":"As a customer, I want to confirm on my phone and start riding. When I'm done, I want to leave the scooter where I can and confirm the end of the trip on the app.","title":"1c - Rent a scooter"},{"location":"Use%20Cases.html#2-battery-level","text":"As a customer, when I'm searching a scooter, I want to know its battery level in advance.","title":"2 - Battery level"},{"location":"Use%20Cases.html#3a-area-of-service-policy","text":"When a scooter is taken out of the area of service borders, it locks.","title":"3a - Area of service policy"},{"location":"Use%20Cases.html#3b-customer-notification-of-the-area-border","text":"As a customer, when I'm approaching the area of service border, I want to be warned about the possibility that my scooter gets locked. How do you want to get warned? I'd like the scooter to play a specific sound, while I get a notification on my phone.","title":"3b - Customer notification of the area border"},{"location":"Use%20Cases.html#4-power-save-policy","text":"When the battery goes below a threshold, the scooter enters a power save mode, during which it runs slower than normal.","title":"4 - Power save policy"},{"location":"Use%20Cases.html#5-customer-notification-of-battery-usage","text":"As a customer, I want to be warned when the battery is running low. I want to be warned with a ringtone.","title":"5 - Customer notification of battery usage"},{"location":"Use%20Cases.html#6-battery-exhausted-policy","text":"When the battery is running low, the scooter warns the customer, if present, that the run must end and enters a standby mode during which it's disabled.","title":"6 - Battery exhausted policy"},{"location":"Use%20Cases.html#7-monitoring-of-scooters","text":"As the business manager, I want to be able to see the position and the battery level of every scooter in a map.","title":"7 - Monitoring of scooters"},{"location":"Use%20Cases.html#8-insights-from-the-system","text":"As the business manager, I want to get suggestions about strategic places for the drop points of the next day.","title":"8 - Insights from the system"},{"location":"Use%20Cases.html#9-unlock-policy-for-employees","text":"As a business employee I want to be able to unlock freely the scooters in order to move them.","title":"9 - Unlock policy for employees."},{"location":"Use%20Cases.html#10-vandalism-prevention","text":"The scooter should discourage theft and vandalism by playing a message when moved while locked or disabled.","title":"10 - Vandalism prevention"},{"location":"Use%20Cases.html#11-integration-with-legacy-payment-system","text":"As the business manager, I want the customers to pay for rides through the existing system. Does the legacy system keep track of all customers data? If I remember correctly, yes. From the legacy system documentation: The legacy payment system needs access to trip data and to customers rent/unlock requests.","title":"11 - Integration with legacy payment system"},{"location":"Use%20Cases.html#use-case-diagram","text":"","title":"Use Case Diagram"},{"location":"Use%20Cases.html#story-diagrams","text":"","title":"Story Diagrams"},{"location":"Use%20Cases.html#story-1-diagram","text":"","title":"Story #1 Diagram"},{"location":"API/v0/paginate.html","text":"a paginated response includes a field meta as the following: { \"meta\" : { \"pageNum\" : i nte ger , \"pageSize\" : i nte ger , \"next\" : s tr i n g } }","title":"Paginate"},{"location":"API/v0/template.html","text":"Context API /path/{urlParams} URL Parameters - urlParams : description GET description Query Parameters - Name : description Body { \"field\" : t ype //Commo n Value } Response Code ***: { \"field\" : t ype //Commo n Value } POST PUT DELETE Outgoing Events Name Fires when { \"field\" : t ype //Commo n Value } Commands Name Subscriptions Service EventName","title":"Context"},{"location":"API/v0/template.html#context","text":"","title":"Context"},{"location":"API/v0/template.html#api","text":"","title":"API"},{"location":"API/v0/template.html#pathurlparams","text":"URL Parameters - urlParams : description","title":"/path/{urlParams}"},{"location":"API/v0/template.html#get","text":"description Query Parameters - Name : description Body { \"field\" : t ype //Commo n Value } Response Code ***: { \"field\" : t ype //Commo n Value }","title":"GET"},{"location":"API/v0/template.html#post","text":"","title":"POST"},{"location":"API/v0/template.html#put","text":"","title":"PUT"},{"location":"API/v0/template.html#delete","text":"","title":"DELETE"},{"location":"API/v0/template.html#outgoing-events","text":"","title":"Outgoing Events"},{"location":"API/v0/template.html#name","text":"Fires when { \"field\" : t ype //Commo n Value }","title":"Name"},{"location":"API/v0/template.html#commands","text":"","title":"Commands"},{"location":"API/v0/template.html#name_1","text":"","title":"Name"},{"location":"API/v0/template.html#subscriptions","text":"","title":"Subscriptions"},{"location":"API/v0/template.html#service","text":"EventName","title":"Service"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html","text":"Area of Service API /areas GET Returns a list of Areas of service. Query Parameters - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] } POST Creates a new Area of Service. Body { \"shape\" : objec t //Shape } Response Code 201: { \"id\" : s tr i n g , //E nt i t yId \"shape\" : objec t //Shape } Code 400 /areas/{id} URL Parameters - id : the EntityId that identifies the requested area. GET get the properties of an existing area. Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"shape\" : objec t , //Shape \"scooters\" : Se t [ s tr i n g ] //Se t [ E nt i t yId ] } Code 400 Code 404 PUT Modify the properties of an existing area. Body { \"shape\" : objec t //Shape } Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"shape\" : objec t //Shape } Code 400 Code 404 DELETE Removes an Area of Service identified by id. Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"shape\" : objec t //Shape } Code 404 /areas/{areaId}?contains={scooterId} URL Parameters - areaId : the EntityId that identifies the area in which to search Query Parameters - contains : the EntityId that identifies the requested scooter GET Returns whether a scooter belonging to an area is currently inside tha area boundary. Response Code 200: { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g , //E nt i t yId \"isInArea\" : boolea n } Code 404: if the scooter doesn't belong to the selected area or the area doesn't exist. /scooters/{id}?belongsTo={areaId} GET Returns whether a scooter belongs to an Area of Service. URL Parameters - scooterId : the EntityId that identifies the requested scooter Query Parameters - belongsTo : the EntityId that identifies the area in which to search Response Code 200: { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g , //E nt i t yId \"belongsToArea\" : boolea n } Code 404: if the scooter or the area doesn't exist. Outgoing Events AreaCreated Fires when a new area is added to the System. { \"id\" : s tr i n g //E nt i t yId } AreaDeleted Fires when a new area is removed from the System. { \"id\" : s tr i n g //E nt i t yId } AreaShapeChanged Fires when the shape of an existing area is modified. { \"id\" : s tr i n g //E nt i t yId } ScooterAssignedToArea Fires when an existing scooter is assigned to an area of service. { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g //E nt i t yId } ScooterRemovedFromArea Fires when an existing scooter is removed from an area of service. { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g //E nt i t yId } ScooterWentOutsideArea Fires when an existing scooter exits from the boundary of its area of service. { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g //E nt i t yId } ScooterReturnedInsideArea Fires when an existing scooter is put back inside the boundary of its area of service. { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g //E nt i t yId } Subscriptions Scooter Data ScooterCreated ScooterDeleted","title":"Area of Service"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#area-of-service","text":"","title":"Area of Service"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#api","text":"","title":"API"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#areas","text":"","title":"/areas"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#get","text":"Returns a list of Areas of service. Query Parameters - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] }","title":"GET"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#post","text":"Creates a new Area of Service. Body { \"shape\" : objec t //Shape } Response Code 201: { \"id\" : s tr i n g , //E nt i t yId \"shape\" : objec t //Shape } Code 400","title":"POST"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#areasid","text":"URL Parameters - id : the EntityId that identifies the requested area.","title":"/areas/{id}"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#get_1","text":"get the properties of an existing area. Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"shape\" : objec t , //Shape \"scooters\" : Se t [ s tr i n g ] //Se t [ E nt i t yId ] } Code 400 Code 404","title":"GET"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#put","text":"Modify the properties of an existing area. Body { \"shape\" : objec t //Shape } Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"shape\" : objec t //Shape } Code 400 Code 404","title":"PUT"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#delete","text":"Removes an Area of Service identified by id. Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"shape\" : objec t //Shape } Code 404","title":"DELETE"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#areasareaidcontainsscooterid","text":"URL Parameters - areaId : the EntityId that identifies the area in which to search Query Parameters - contains : the EntityId that identifies the requested scooter","title":"/areas/{areaId}?contains={scooterId}"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#get_2","text":"Returns whether a scooter belonging to an area is currently inside tha area boundary. Response Code 200: { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g , //E nt i t yId \"isInArea\" : boolea n } Code 404: if the scooter doesn't belong to the selected area or the area doesn't exist.","title":"GET"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#scootersidbelongstoareaid","text":"","title":"/scooters/{id}?belongsTo={areaId}"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#get_3","text":"Returns whether a scooter belongs to an Area of Service. URL Parameters - scooterId : the EntityId that identifies the requested scooter Query Parameters - belongsTo : the EntityId that identifies the area in which to search Response Code 200: { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g , //E nt i t yId \"belongsToArea\" : boolea n } Code 404: if the scooter or the area doesn't exist.","title":"GET"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#outgoing-events","text":"","title":"Outgoing Events"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#areacreated","text":"Fires when a new area is added to the System. { \"id\" : s tr i n g //E nt i t yId }","title":"AreaCreated"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#areadeleted","text":"Fires when a new area is removed from the System. { \"id\" : s tr i n g //E nt i t yId }","title":"AreaDeleted"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#areashapechanged","text":"Fires when the shape of an existing area is modified. { \"id\" : s tr i n g //E nt i t yId }","title":"AreaShapeChanged"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#scooterassignedtoarea","text":"Fires when an existing scooter is assigned to an area of service. { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g //E nt i t yId }","title":"ScooterAssignedToArea"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#scooterremovedfromarea","text":"Fires when an existing scooter is removed from an area of service. { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g //E nt i t yId }","title":"ScooterRemovedFromArea"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#scooterwentoutsidearea","text":"Fires when an existing scooter exits from the boundary of its area of service. { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g //E nt i t yId }","title":"ScooterWentOutsideArea"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#scooterreturnedinsidearea","text":"Fires when an existing scooter is put back inside the boundary of its area of service. { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g //E nt i t yId }","title":"ScooterReturnedInsideArea"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#subscriptions","text":"","title":"Subscriptions"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#scooter-data","text":"ScooterCreated ScooterDeleted","title":"Scooter Data"},{"location":"API/v0/E-Scooter/Scooter%20Control.html","text":"Scooter Control Outgoing Events ScooterUnlocked Fires when a scooter is unlocked { \"id\" : s tr i n g //E nt i t yId } ScooterLocked Fires when a scooter is locked { \"id\" : s tr i n g //E nt i t yId } ScooterEnabled Fires when a scooter is enabled { \"id\" : s tr i n g //E nt i t yId } ScooterDisabled Fires when a scooter is disabled { \"id\" : s tr i n g //E nt i t yId } ScooterPowerModeChanged Fires when the power mode of a scooter is changed { \"id\" : s tr i n g , //E nt i t yId \"powerMode\" : s tr i n g //PowerMode } ScooterMaxSpeedChanged Fires when when the max speed of a scooter is changed { \"id\" : s tr i n g , //E nt i t yId \"maxSpeed\" : nu mber //Speed } Subscriptions Scooter Data ScooterCreated ScooterDeleted Area of Service ScooterWentOutsideArea ScooterReturnedInsideArea ScooterRemovedFromArea ScooterAssignedToArea","title":"Scooter Control"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#scooter-control","text":"","title":"Scooter Control"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#outgoing-events","text":"","title":"Outgoing Events"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#scooterunlocked","text":"Fires when a scooter is unlocked { \"id\" : s tr i n g //E nt i t yId }","title":"ScooterUnlocked"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#scooterlocked","text":"Fires when a scooter is locked { \"id\" : s tr i n g //E nt i t yId }","title":"ScooterLocked"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#scooterenabled","text":"Fires when a scooter is enabled { \"id\" : s tr i n g //E nt i t yId }","title":"ScooterEnabled"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#scooterdisabled","text":"Fires when a scooter is disabled { \"id\" : s tr i n g //E nt i t yId }","title":"ScooterDisabled"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#scooterpowermodechanged","text":"Fires when the power mode of a scooter is changed { \"id\" : s tr i n g , //E nt i t yId \"powerMode\" : s tr i n g //PowerMode }","title":"ScooterPowerModeChanged"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#scootermaxspeedchanged","text":"Fires when when the max speed of a scooter is changed { \"id\" : s tr i n g , //E nt i t yId \"maxSpeed\" : nu mber //Speed }","title":"ScooterMaxSpeedChanged"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#subscriptions","text":"","title":"Subscriptions"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#scooter-data","text":"ScooterCreated ScooterDeleted","title":"Scooter Data"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#area-of-service","text":"ScooterWentOutsideArea ScooterReturnedInsideArea ScooterRemovedFromArea ScooterAssignedToArea","title":"Area of Service"},{"location":"API/v0/E-Scooter/Scooter%20Data.html","text":"Scooter Data API /scooters GET Returns a list of Scooters. Query Params - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] } POST Creates a new Scooter. Body { \"id\" : s tr i n g , //E nt i t yId \"serialNumber\" : s tr i n g , //SerialNumber \"weight\" : i nte ger , //Weigh t \"model\" : s tr i n g , //ModelI nf o } Response Code 201: { \"id\" : s tr i n g //E nt i t yId } Code 400 /scooters/{id} URL Parameters - id : the EntityId that identifies the requested scooter. GET Returns the detail of the specified scooter. Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"serialNumber\" : s tr i n g , // SerialNumber \"weight\" : i nte ger , //Weigh t \"model\" : s tr i n g , //ModelI nf o } Code 404 DELETE Removes the specified scooter. Response Code 200: { \"id\" : s tr i n g //E nt i t yId } Code 404 Outgoing Events ScooterCreated Fires when a new scooter is added to the System. { \"id\" : s tr i n g //E nt i t yId } ScooterDeleted Fires when a new scooter is removed from the System. { \"id\" : s tr i n g //E nt i t yId }","title":"Scooter Data"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#scooter-data","text":"","title":"Scooter Data"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#api","text":"","title":"API"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#scooters","text":"","title":"/scooters"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#get","text":"Returns a list of Scooters. Query Params - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] }","title":"GET"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#post","text":"Creates a new Scooter. Body { \"id\" : s tr i n g , //E nt i t yId \"serialNumber\" : s tr i n g , //SerialNumber \"weight\" : i nte ger , //Weigh t \"model\" : s tr i n g , //ModelI nf o } Response Code 201: { \"id\" : s tr i n g //E nt i t yId } Code 400","title":"POST"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#scootersid","text":"URL Parameters - id : the EntityId that identifies the requested scooter.","title":"/scooters/{id}"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#get_1","text":"Returns the detail of the specified scooter. Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"serialNumber\" : s tr i n g , // SerialNumber \"weight\" : i nte ger , //Weigh t \"model\" : s tr i n g , //ModelI nf o } Code 404","title":"GET"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#delete","text":"Removes the specified scooter. Response Code 200: { \"id\" : s tr i n g //E nt i t yId } Code 404","title":"DELETE"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#outgoing-events","text":"","title":"Outgoing Events"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#scootercreated","text":"Fires when a new scooter is added to the System. { \"id\" : s tr i n g //E nt i t yId }","title":"ScooterCreated"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#scooterdeleted","text":"Fires when a new scooter is removed from the System. { \"id\" : s tr i n g //E nt i t yId }","title":"ScooterDeleted"},{"location":"API/v0/E-Scooter/Scooter%20Physical%20Control.html","text":"Scooter Physical Control Outgoing Events ScooterPosition Fires each every predefined certain time { \"id\" : s tr i n g , //E nt i t yId \"position\" : objec t , //Geopoi nt } Subscriptions Scooter Control ScooterUnlocked ScooterLocked ScooterEnabled ScooterDisabled ScooterPoweModeChanged ScooterMaxSpeedChanged","title":"Scooter Physical Control"},{"location":"API/v0/E-Scooter/Scooter%20Physical%20Control.html#scooter-physical-control","text":"","title":"Scooter Physical Control"},{"location":"API/v0/E-Scooter/Scooter%20Physical%20Control.html#outgoing-events","text":"","title":"Outgoing Events"},{"location":"API/v0/E-Scooter/Scooter%20Physical%20Control.html#scooterposition","text":"Fires each every predefined certain time { \"id\" : s tr i n g , //E nt i t yId \"position\" : objec t , //Geopoi nt }","title":"ScooterPosition"},{"location":"API/v0/E-Scooter/Scooter%20Physical%20Control.html#subscriptions","text":"","title":"Subscriptions"},{"location":"API/v0/E-Scooter/Scooter%20Physical%20Control.html#scooter-control","text":"ScooterUnlocked ScooterLocked ScooterEnabled ScooterDisabled ScooterPoweModeChanged ScooterMaxSpeedChanged","title":"Scooter Control"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html","text":"Drop Points Planning API /DropPoints GET Returns the list of the best drop points Query Parameters - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] } /DropPoints/{id} URL Parameters - id : the EntityId that identifies the requested drop point. GET get the properties of an existing drop point Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"position\" : objec t , //GeoPoi nt \"scooterNumber\" : nu mber } Code 400 Code 404 Subscriptions Area of Servie AreaCreated AreaDeleted AreaShapeChanged ScooterAssignedToArea ScooterRemovedFromArea Trip TripStarted TripEnded Rent RentConfirmed RentStopped","title":"Drop Points Planning"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#drop-points-planning","text":"","title":"Drop Points Planning"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#api","text":"","title":"API"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#droppoints","text":"","title":"/DropPoints"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#get","text":"Returns the list of the best drop points Query Parameters - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] }","title":"GET"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#droppointsid","text":"URL Parameters - id : the EntityId that identifies the requested drop point.","title":"/DropPoints/{id}"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#get_1","text":"get the properties of an existing drop point Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"position\" : objec t , //GeoPoi nt \"scooterNumber\" : nu mber } Code 400 Code 404","title":"GET"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#subscriptions","text":"","title":"Subscriptions"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#area-of-servie","text":"AreaCreated AreaDeleted AreaShapeChanged ScooterAssignedToArea ScooterRemovedFromArea","title":"Area of Servie"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#trip","text":"TripStarted TripEnded","title":"Trip"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#rent","text":"RentConfirmed RentStopped","title":"Rent"},{"location":"API/v0/Rent/Rent%20Payment.html","text":"Rent Payment Outgoing Events RentAuthorized Fires when a rent is authorized { \"rentId\" : s tr i n g //E nt i t yId } RentNotAuthorized Fires when a rent is authorized { \"rentId\" : s tr i n g //E nt i t yId } CreditExhaustedForRent Fires when the credit isn't enough to continue the rent { \"rentId\" : s tr i n g //E nt i t yId } Subscriptions Rent RentRequested RentConfirmed RentStopped","title":"Rent Payment"},{"location":"API/v0/Rent/Rent%20Payment.html#rent-payment","text":"","title":"Rent Payment"},{"location":"API/v0/Rent/Rent%20Payment.html#outgoing-events","text":"","title":"Outgoing Events"},{"location":"API/v0/Rent/Rent%20Payment.html#rentauthorized","text":"Fires when a rent is authorized { \"rentId\" : s tr i n g //E nt i t yId }","title":"RentAuthorized"},{"location":"API/v0/Rent/Rent%20Payment.html#rentnotauthorized","text":"Fires when a rent is authorized { \"rentId\" : s tr i n g //E nt i t yId }","title":"RentNotAuthorized"},{"location":"API/v0/Rent/Rent%20Payment.html#creditexhaustedforrent","text":"Fires when the credit isn't enough to continue the rent { \"rentId\" : s tr i n g //E nt i t yId }","title":"CreditExhaustedForRent"},{"location":"API/v0/Rent/Rent%20Payment.html#subscriptions","text":"","title":"Subscriptions"},{"location":"API/v0/Rent/Rent%20Payment.html#rent","text":"RentRequested RentConfirmed RentStopped","title":"Rent"},{"location":"API/v0/Rent/Rent.html","text":"Rent API /rents GET Returns a list of Rents. Query Parameters - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] } /rents/{rentId} URL Parameters - rentId : the EntityId that identifies the requested rent GET Requests the end of a rent Response Code 201: { \"scooterId\" : s tr i n g , //E nt i t yId \"customerId\" : s tr i n g , //E nt i t yId \"rentId\" : s tr i n g , //E nt i t yId \"confirmed\" : boolea n , \"end\" : boolea n } Code 404 /scooter/{scooterId}/rent URL Parameters - scooterId : the EntityId that identifies the requested scooter POST Requests the start of a rent Body { \"customerId\" : s tr i n g //E nt i t yId } Response Code 201: { \"scooterId\" : s tr i n g , //E nt i t yId \"customerId\" : s tr i n g , //E nt i t yId \"rentId\" : s tr i n g , //E nt i t yId } Code 404 Code 400 /rents/stop/{rentId} URL Parameters - rentId : the EntityId that identifies the requested rent POST Requests the end of a rent Response Code 201: { \"rentId\" : s tr i n g , //E nt i t yId } Code 404 Outgoing Events RentRequested Fires when a rent is created but still not confirmed { \"rentId\" : s tr i n g , //E nt i t yId } RentConfirmed Fires when a rent is confirmed { /* TODO ci va nn o? \"scooterId\" : s tr i n g , //E nt i t yId \"customerId\" : s tr i n g , //E nt i t yId */ \"rentId\" : s tr i n g , //E nt i t yId \"confirm\" : nu mber //Times ta mp } RentStopped Fires when a rent is stopped for the reason specified in the body { \"rentId\" : s tr i n g , //E nt i t yId \"reason\" : s tr i n g , //Re nt E n dReaso n \"stop\" : nu mber //Times ta mp } Subscriptions ScooterData ScooterCreated ScooterDeleted Rent Payment RentAuthorized RentNotAuthorized CreditExhaustedForRent","title":"Rent"},{"location":"API/v0/Rent/Rent.html#rent","text":"","title":"Rent"},{"location":"API/v0/Rent/Rent.html#api","text":"","title":"API"},{"location":"API/v0/Rent/Rent.html#rents","text":"","title":"/rents"},{"location":"API/v0/Rent/Rent.html#get","text":"Returns a list of Rents. Query Parameters - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] }","title":"GET"},{"location":"API/v0/Rent/Rent.html#rentsrentid","text":"URL Parameters - rentId : the EntityId that identifies the requested rent","title":"/rents/{rentId}"},{"location":"API/v0/Rent/Rent.html#get_1","text":"Requests the end of a rent Response Code 201: { \"scooterId\" : s tr i n g , //E nt i t yId \"customerId\" : s tr i n g , //E nt i t yId \"rentId\" : s tr i n g , //E nt i t yId \"confirmed\" : boolea n , \"end\" : boolea n } Code 404","title":"GET"},{"location":"API/v0/Rent/Rent.html#scooterscooteridrent","text":"URL Parameters - scooterId : the EntityId that identifies the requested scooter","title":"/scooter/{scooterId}/rent"},{"location":"API/v0/Rent/Rent.html#post","text":"Requests the start of a rent Body { \"customerId\" : s tr i n g //E nt i t yId } Response Code 201: { \"scooterId\" : s tr i n g , //E nt i t yId \"customerId\" : s tr i n g , //E nt i t yId \"rentId\" : s tr i n g , //E nt i t yId } Code 404 Code 400","title":"POST"},{"location":"API/v0/Rent/Rent.html#rentsstoprentid","text":"URL Parameters - rentId : the EntityId that identifies the requested rent","title":"/rents/stop/{rentId}"},{"location":"API/v0/Rent/Rent.html#post_1","text":"Requests the end of a rent Response Code 201: { \"rentId\" : s tr i n g , //E nt i t yId } Code 404","title":"POST"},{"location":"API/v0/Rent/Rent.html#outgoing-events","text":"","title":"Outgoing Events"},{"location":"API/v0/Rent/Rent.html#rentrequested","text":"Fires when a rent is created but still not confirmed { \"rentId\" : s tr i n g , //E nt i t yId }","title":"RentRequested"},{"location":"API/v0/Rent/Rent.html#rentconfirmed","text":"Fires when a rent is confirmed { /* TODO ci va nn o? \"scooterId\" : s tr i n g , //E nt i t yId \"customerId\" : s tr i n g , //E nt i t yId */ \"rentId\" : s tr i n g , //E nt i t yId \"confirm\" : nu mber //Times ta mp }","title":"RentConfirmed"},{"location":"API/v0/Rent/Rent.html#rentstopped","text":"Fires when a rent is stopped for the reason specified in the body { \"rentId\" : s tr i n g , //E nt i t yId \"reason\" : s tr i n g , //Re nt E n dReaso n \"stop\" : nu mber //Times ta mp }","title":"RentStopped"},{"location":"API/v0/Rent/Rent.html#subscriptions","text":"","title":"Subscriptions"},{"location":"API/v0/Rent/Rent.html#scooterdata","text":"ScooterCreated ScooterDeleted","title":"ScooterData"},{"location":"API/v0/Rent/Rent.html#rent-payment","text":"RentAuthorized RentNotAuthorized CreditExhaustedForRent","title":"Rent Payment"},{"location":"API/v0/Rent/Trip.html","text":"Trip API /trips GET Returns a list of Trips. Query Parameters - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] } POST Creates a new Trip. Body { \"rentId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g , //E nt i t yId } Response Code 201: { \"id\" : s tr i n g , //E nt i t yId } Code 400 /trips/{id} URL Parameters - id : the EntityId that identifies the requested trip. GET get the properties of an existing trip Response Code 200: { \"id\" : s tr i n g , //E nt i t yId //TODO ges t ire s tart s t op come TripPoi nt ? \"start\" : objec t , //TripPoi nt \"stop\" : objec t , //TripPoi nt \"travelledDistance\" : nu mber //Dis tan ce } Code 400 Code 404 Outgoing Events TripStarted Fires when a new trip starts { \"id\" : s tr i n g , //E nt i t yId //TODO ges t ire s tart s t op come TripPoi nt ? \"start\" : objec t , //TripPoi nt } TripEnded Fires when a new trip ends { \"id\" : s tr i n g , //E nt i t yId //TODO ges t ire s tart s t op come TripPoi nt ? \"stop\" : objec t , //TripPoi nt } Subscriptions Scooter Data ScooterCreated ScooterDeleted Rent RentRequest RentConfirmed RentStopped","title":"Trip"},{"location":"API/v0/Rent/Trip.html#trip","text":"","title":"Trip"},{"location":"API/v0/Rent/Trip.html#api","text":"","title":"API"},{"location":"API/v0/Rent/Trip.html#trips","text":"","title":"/trips"},{"location":"API/v0/Rent/Trip.html#get","text":"Returns a list of Trips. Query Parameters - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] }","title":"GET"},{"location":"API/v0/Rent/Trip.html#post","text":"Creates a new Trip. Body { \"rentId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g , //E nt i t yId } Response Code 201: { \"id\" : s tr i n g , //E nt i t yId } Code 400","title":"POST"},{"location":"API/v0/Rent/Trip.html#tripsid","text":"URL Parameters - id : the EntityId that identifies the requested trip.","title":"/trips/{id}"},{"location":"API/v0/Rent/Trip.html#get_1","text":"get the properties of an existing trip Response Code 200: { \"id\" : s tr i n g , //E nt i t yId //TODO ges t ire s tart s t op come TripPoi nt ? \"start\" : objec t , //TripPoi nt \"stop\" : objec t , //TripPoi nt \"travelledDistance\" : nu mber //Dis tan ce } Code 400 Code 404","title":"GET"},{"location":"API/v0/Rent/Trip.html#outgoing-events","text":"","title":"Outgoing Events"},{"location":"API/v0/Rent/Trip.html#tripstarted","text":"Fires when a new trip starts { \"id\" : s tr i n g , //E nt i t yId //TODO ges t ire s tart s t op come TripPoi nt ? \"start\" : objec t , //TripPoi nt }","title":"TripStarted"},{"location":"API/v0/Rent/Trip.html#tripended","text":"Fires when a new trip ends { \"id\" : s tr i n g , //E nt i t yId //TODO ges t ire s tart s t op come TripPoi nt ? \"stop\" : objec t , //TripPoi nt }","title":"TripEnded"},{"location":"API/v0/Rent/Trip.html#subscriptions","text":"","title":"Subscriptions"},{"location":"API/v0/Rent/Trip.html#scooter-data","text":"ScooterCreated ScooterDeleted","title":"Scooter Data"},{"location":"API/v0/Rent/Trip.html#rent","text":"RentRequest RentConfirmed RentStopped","title":"Rent"},{"location":"API/v1/index.html","text":"API v1 TODO - Link here","title":"API v1"},{"location":"API/v1/index.html#api-v1","text":"TODO - Link here","title":"API v1"},{"location":"Device%20Emulator/Requirements.html","text":"Device Emulator Requirements Emulate all the devices on a Iot Hub instance Fetch the list of all devices, periodically For each device, start an infinite emulation that lasts until a \"stop event\" is fired A stop event can be a keyboard interrupt or a C# method call The emulation consists of: Load device data Decide which property should be changed, why and how If the device is locked, do nothing If it's unlocked, randomly select an action: Do nothing Change position based on velocity (only if velocity is not 0) Change position and change velocity If it's moving, consume some battery If the battery is below the standby threshold go in standby mode Change the property values Submit the update to IoT Hub Note Emulating a device means firing a sequence of realistic updates on its reported properties on IoT Hub. We consider every device to be an E-Scooter . Can be executed both as script and as a library","title":"Device Emulator Requirements"},{"location":"Device%20Emulator/Requirements.html#device-emulator-requirements","text":"Emulate all the devices on a Iot Hub instance Fetch the list of all devices, periodically For each device, start an infinite emulation that lasts until a \"stop event\" is fired A stop event can be a keyboard interrupt or a C# method call The emulation consists of: Load device data Decide which property should be changed, why and how If the device is locked, do nothing If it's unlocked, randomly select an action: Do nothing Change position based on velocity (only if velocity is not 0) Change position and change velocity If it's moving, consume some battery If the battery is below the standby threshold go in standby mode Change the property values Submit the update to IoT Hub Note Emulating a device means firing a sequence of realistic updates on its reported properties on IoT Hub. We consider every device to be an E-Scooter . Can be executed both as script and as a library","title":"Device Emulator Requirements"},{"location":"Domain%20Models/Common/Common%20Values.html","text":"Common Types EntityId EntityId represents how the identity of entities is passed in the system enabling the possibility to distinguish between one another of the same kind. Percentage percentage represents the level of a source as number in [0,1]. Constraints : \\(0 <= base1Value <= 1\\) \\(base100Value = round(base1Value * 100)\\) Speed metersPerSecond and kilometersPerHour are two different units for the same speed value. Constraints : \\(metersPerSecond = kilometersPerHour / 3.6\\) \\(metersPerSecond >= 0\\) Name Constraints : \\(len(value) > 0\\) Latitude Constraints : \\(value > -90 and value < 90\\) Longitude Constraints : \\(value > -180 and value < 180\\) GeoPoint Distance Constraints : \\(kilometers >= 0\\) Timestamp value is the number of milliseconds passed since 01/01/1970 00:00:00 (Epoch) Duration milliseconds is the number of milliseconds. Constraints : \\(milliseconds >= 0\\) DomainError Nothing Result","title":"Common Types"},{"location":"Domain%20Models/Common/Common%20Values.html#common-types","text":"","title":"Common Types"},{"location":"Domain%20Models/Common/Common%20Values.html#entityid","text":"EntityId represents how the identity of entities is passed in the system enabling the possibility to distinguish between one another of the same kind.","title":"EntityId"},{"location":"Domain%20Models/Common/Common%20Values.html#percentage","text":"percentage represents the level of a source as number in [0,1]. Constraints : \\(0 <= base1Value <= 1\\) \\(base100Value = round(base1Value * 100)\\)","title":"Percentage"},{"location":"Domain%20Models/Common/Common%20Values.html#speed","text":"metersPerSecond and kilometersPerHour are two different units for the same speed value. Constraints : \\(metersPerSecond = kilometersPerHour / 3.6\\) \\(metersPerSecond >= 0\\)","title":"Speed"},{"location":"Domain%20Models/Common/Common%20Values.html#name","text":"Constraints : \\(len(value) > 0\\)","title":"Name"},{"location":"Domain%20Models/Common/Common%20Values.html#latitude","text":"Constraints : \\(value > -90 and value < 90\\)","title":"Latitude"},{"location":"Domain%20Models/Common/Common%20Values.html#longitude","text":"Constraints : \\(value > -180 and value < 180\\)","title":"Longitude"},{"location":"Domain%20Models/Common/Common%20Values.html#geopoint","text":"","title":"GeoPoint"},{"location":"Domain%20Models/Common/Common%20Values.html#distance","text":"Constraints : \\(kilometers >= 0\\)","title":"Distance"},{"location":"Domain%20Models/Common/Common%20Values.html#timestamp","text":"value is the number of milliseconds passed since 01/01/1970 00:00:00 (Epoch)","title":"Timestamp"},{"location":"Domain%20Models/Common/Common%20Values.html#duration","text":"milliseconds is the number of milliseconds. Constraints : \\(milliseconds >= 0\\)","title":"Duration"},{"location":"Domain%20Models/Common/Common%20Values.html#domainerror","text":"","title":"DomainError"},{"location":"Domain%20Models/Common/Common%20Values.html#nothing","text":"","title":"Nothing"},{"location":"Domain%20Models/Common/Common%20Values.html#result","text":"","title":"Result"},{"location":"Domain%20Models/E-Scooter/Area%20of%20Service.html","text":"Area of Service Domain Model Class Diagram Domain Events AreaCreated : emitted when an area is created AreaDeleted : emitted when an area is deleted ScooterAssignedToArea : emitted when a scooter is set to belong to a certain area of service. ScooterRemovedFromArea : emitted when a scooter is set to not belong to any area. AreaShapeChanged : emitted when the shape of an area of service is changed. ScooterWentOutsideArea : emitted when a scooter that belongs to an area is moved outside of its shape. ScooterReturnedInsideArea : emitted when a scooter returns inside its area of service after having moved out.","title":"Area of Service Domain Model"},{"location":"Domain%20Models/E-Scooter/Area%20of%20Service.html#area-of-service-domain-model","text":"","title":"Area of Service Domain Model"},{"location":"Domain%20Models/E-Scooter/Area%20of%20Service.html#class-diagram","text":"","title":"Class Diagram"},{"location":"Domain%20Models/E-Scooter/Area%20of%20Service.html#domain-events","text":"AreaCreated : emitted when an area is created AreaDeleted : emitted when an area is deleted ScooterAssignedToArea : emitted when a scooter is set to belong to a certain area of service. ScooterRemovedFromArea : emitted when a scooter is set to not belong to any area. AreaShapeChanged : emitted when the shape of an area of service is changed. ScooterWentOutsideArea : emitted when a scooter that belongs to an area is moved outside of its shape. ScooterReturnedInsideArea : emitted when a scooter returns inside its area of service after having moved out.","title":"Domain Events"},{"location":"Domain%20Models/E-Scooter/Scooter%20Control.html","text":"Scooter Control Domain Model Class Diagram Details PowerMode Represents all the possible power-related modes a scooter can have. BatteryLevel percentage represents a Percentage of the level of the battery. Power Mode Manager The Power Mode State Diagram: Domain Events ScooterUnlocked : emitted when a scooter is unlocked ScooterLocked : emitted when a scooter is locked ScooterPowerModeChanged : emitted when the power mode of a scooter is changed ScooterMaxSpeedChanged : emitted when the max speed of a scooter is changed ScooterEnabled : emitted when a scooter is enabled ScooterDisabled : emitted when a scooter is disabled","title":"Scooter Control Domain Model"},{"location":"Domain%20Models/E-Scooter/Scooter%20Control.html#scooter-control-domain-model","text":"","title":"Scooter Control Domain Model"},{"location":"Domain%20Models/E-Scooter/Scooter%20Control.html#class-diagram","text":"","title":"Class Diagram"},{"location":"Domain%20Models/E-Scooter/Scooter%20Control.html#details","text":"","title":"Details"},{"location":"Domain%20Models/E-Scooter/Scooter%20Control.html#powermode","text":"Represents all the possible power-related modes a scooter can have.","title":"PowerMode"},{"location":"Domain%20Models/E-Scooter/Scooter%20Control.html#batterylevel","text":"percentage represents a Percentage of the level of the battery.","title":"BatteryLevel"},{"location":"Domain%20Models/E-Scooter/Scooter%20Control.html#power-mode-manager","text":"The Power Mode State Diagram:","title":"Power Mode Manager"},{"location":"Domain%20Models/E-Scooter/Scooter%20Control.html#domain-events","text":"ScooterUnlocked : emitted when a scooter is unlocked ScooterLocked : emitted when a scooter is locked ScooterPowerModeChanged : emitted when the power mode of a scooter is changed ScooterMaxSpeedChanged : emitted when the max speed of a scooter is changed ScooterEnabled : emitted when a scooter is enabled ScooterDisabled : emitted when a scooter is disabled","title":"Domain Events"},{"location":"Domain%20Models/E-Scooter/Scooter%20Data.html","text":"Scooter Data Domain Model Class Diagram Details Scooter SerialNumber Constraints : ^[A-Za-z0-9-]+$ Weight Constraints : \\(kilograms > 0\\) ModelInfo Domain events ScooterCreated : emitted when a new scooter is registered to the system. ScooterDeleted : emitted when a scooter is removed from the system.","title":"Scooter Data Domain Model"},{"location":"Domain%20Models/E-Scooter/Scooter%20Data.html#scooter-data-domain-model","text":"","title":"Scooter Data Domain Model"},{"location":"Domain%20Models/E-Scooter/Scooter%20Data.html#class-diagram","text":"","title":"Class Diagram"},{"location":"Domain%20Models/E-Scooter/Scooter%20Data.html#details","text":"","title":"Details"},{"location":"Domain%20Models/E-Scooter/Scooter%20Data.html#scooter","text":"","title":"Scooter"},{"location":"Domain%20Models/E-Scooter/Scooter%20Data.html#serialnumber","text":"Constraints : ^[A-Za-z0-9-]+$","title":"SerialNumber"},{"location":"Domain%20Models/E-Scooter/Scooter%20Data.html#weight","text":"Constraints : \\(kilograms > 0\\)","title":"Weight"},{"location":"Domain%20Models/E-Scooter/Scooter%20Data.html#modelinfo","text":"","title":"ModelInfo"},{"location":"Domain%20Models/E-Scooter/Scooter%20Data.html#domain-events","text":"ScooterCreated : emitted when a new scooter is registered to the system. ScooterDeleted : emitted when a scooter is removed from the system.","title":"Domain events"},{"location":"Domain%20Models/E-Scooter/Scooter%20Physical%20Control.html","text":"Scooter Physical Control Domain Model Class Diagram Details Scooter Exposes the possible action to do on the physical Scooter. All the actions are idempotent. Domain Events","title":"Scooter Physical Control Domain Model"},{"location":"Domain%20Models/E-Scooter/Scooter%20Physical%20Control.html#scooter-physical-control-domain-model","text":"","title":"Scooter Physical Control Domain Model"},{"location":"Domain%20Models/E-Scooter/Scooter%20Physical%20Control.html#class-diagram","text":"","title":"Class Diagram"},{"location":"Domain%20Models/E-Scooter/Scooter%20Physical%20Control.html#details","text":"","title":"Details"},{"location":"Domain%20Models/E-Scooter/Scooter%20Physical%20Control.html#scooter","text":"Exposes the possible action to do on the physical Scooter. All the actions are idempotent.","title":"Scooter"},{"location":"Domain%20Models/E-Scooter/Scooter%20Physical%20Control.html#domain-events","text":"","title":"Domain Events"},{"location":"Domain%20Models/Insight/Drop%20Points%20Planning.html","text":"Drop Points Planning Domain Class Diagram Details Drop Point A drop point is a GeoPoint representing a suggested spot where to place some scooters. Domain Events","title":"Drop Points Planning Domain"},{"location":"Domain%20Models/Insight/Drop%20Points%20Planning.html#drop-points-planning-domain","text":"","title":"Drop Points Planning Domain"},{"location":"Domain%20Models/Insight/Drop%20Points%20Planning.html#class-diagram","text":"","title":"Class Diagram"},{"location":"Domain%20Models/Insight/Drop%20Points%20Planning.html#details","text":"","title":"Details"},{"location":"Domain%20Models/Insight/Drop%20Points%20Planning.html#drop-point","text":"A drop point is a GeoPoint representing a suggested spot where to place some scooters.","title":"Drop Point"},{"location":"Domain%20Models/Insight/Drop%20Points%20Planning.html#domain-events","text":"","title":"Domain Events"},{"location":"Domain%20Models/Rent/Rent%20Payment.html","text":"Rent Payment Domain Model Class Diagram Details Rent Process Diagram Domain Events RentAuthorized : RentNotAuthorized : CreditExhaustedForRent :","title":"Rent Payment Domain Model"},{"location":"Domain%20Models/Rent/Rent%20Payment.html#rent-payment-domain-model","text":"","title":"Rent Payment Domain Model"},{"location":"Domain%20Models/Rent/Rent%20Payment.html#class-diagram","text":"","title":"Class Diagram"},{"location":"Domain%20Models/Rent/Rent%20Payment.html#details","text":"","title":"Details"},{"location":"Domain%20Models/Rent/Rent%20Payment.html#rent-process-diagram","text":"","title":"Rent Process Diagram"},{"location":"Domain%20Models/Rent/Rent%20Payment.html#domain-events","text":"RentAuthorized : RentNotAuthorized : CreditExhaustedForRent :","title":"Domain Events"},{"location":"Domain%20Models/Rent/Rent.html","text":"Rent Domain Model Class Diagram Details Rent Constraints : \\(confirmation.date + confirmation.maxEnd >= end.date \\text{ if } \\exists end\\) \\(\\exists confirmation \\text{ if } \\exists end\\) Domain Events RentRequested : RentConfirmed : RentStopped : RentCanceled :","title":"Rent Domain Model"},{"location":"Domain%20Models/Rent/Rent.html#rent-domain-model","text":"","title":"Rent Domain Model"},{"location":"Domain%20Models/Rent/Rent.html#class-diagram","text":"","title":"Class Diagram"},{"location":"Domain%20Models/Rent/Rent.html#details","text":"","title":"Details"},{"location":"Domain%20Models/Rent/Rent.html#rent","text":"Constraints : \\(confirmation.date + confirmation.maxEnd >= end.date \\text{ if } \\exists end\\) \\(\\exists confirmation \\text{ if } \\exists end\\)","title":"Rent"},{"location":"Domain%20Models/Rent/Rent.html#domain-events","text":"RentRequested : RentConfirmed : RentStopped : RentCanceled :","title":"Domain Events"},{"location":"Domain%20Models/Rent/Trip.html","text":"Trip Domain Model Class Diagram Domain Events TripStarted : TripEnded :","title":"Trip Domain Model"},{"location":"Domain%20Models/Rent/Trip.html#trip-domain-model","text":"","title":"Trip Domain Model"},{"location":"Domain%20Models/Rent/Trip.html#class-diagram","text":"","title":"Class Diagram"},{"location":"Domain%20Models/Rent/Trip.html#domain-events","text":"TripStarted : TripEnded :","title":"Domain Events"}]}; var __search = { index: Promise.resolve(local_index) }