const local_index = {"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Introduction This autogenerated website stores all the relevant artifacts produced to document the process of designing the system following a Domain Driven approach as well as the final architecture of the solution. E-Scooter 2077 documentation This repository contains the documentation regarding the developement process of a DigitalTwin-based monitoring and managing system for a fake e-scooter renting company. You can start here . Project Proposal Members Samuele Burattini: samuele.burattini@studio.unibo.it Luca Deluigi: luca.deluigi3@studio.unibo.it Francesco Dente: francesco.dente@studio.unibo.it Simone Magnani: simone.magnani4@studio.unibo.it Scenario The group is committed to design a microservice system that collects and merge e-scooter related data to create a digital twin of the physical entity. The collected data will be: Battery percentage Position and speed in real-time Activity status (rented, idle, etc.) Lock state Availability for renting Any other relevant data discovered while developing The goal is to maximize the coverage of the renting service by analyzing users and scooters behaviour to map the more requested areas and which kind of trips the users do most in different areas. To also make use of the power of the digital twins onto their corresponding physical device a mechanism of battery conservation is put in place to guarantee a long lasting battery life by limiting speed when the battery is too low and a remote locking and disabling mechanism that activates when the scooter is outside of the recovery service area or when the battery is below the minimum threshold to guarantee the device not to turn off. Monitoring will be made possible through an admin dashboard that show the overall state of all the devices in real-time. Course requirements The system will be designed with a domain driven approach. In detail the team will have: an initial knowledge crunching session (with fake domain experts) the definition, mantain and use of the ubiquitous language a requirement analysis, carried out through user stories and use-case diagrams bounded context partitioning and definition of a context-map domain models for each relevant bounded context Apart from that the project will follow a developement process based on continuos integration & deployment for most of the system components. The tools used will be: Dotnet CLI for build automation Github Actions for continuous integration Github Pages for the hosting of the automatic generated documentation Microsoft Azure as a target platform for the deployment of the whole system Quality Assurance tools to be defined during developement (linter, automatic testing etc.)","title":"Introduction"},{"location":"index.html#introduction","text":"This autogenerated website stores all the relevant artifacts produced to document the process of designing the system following a Domain Driven approach as well as the final architecture of the solution.","title":"Introduction"},{"location":"index.html#e-scooter-2077-documentation","text":"This repository contains the documentation regarding the developement process of a DigitalTwin-based monitoring and managing system for a fake e-scooter renting company. You can start here .","title":"E-Scooter 2077 documentation"},{"location":"index.html#project-proposal","text":"","title":"Project Proposal"},{"location":"index.html#members","text":"Samuele Burattini: samuele.burattini@studio.unibo.it Luca Deluigi: luca.deluigi3@studio.unibo.it Francesco Dente: francesco.dente@studio.unibo.it Simone Magnani: simone.magnani4@studio.unibo.it","title":"Members"},{"location":"index.html#scenario","text":"The group is committed to design a microservice system that collects and merge e-scooter related data to create a digital twin of the physical entity. The collected data will be: Battery percentage Position and speed in real-time Activity status (rented, idle, etc.) Lock state Availability for renting Any other relevant data discovered while developing The goal is to maximize the coverage of the renting service by analyzing users and scooters behaviour to map the more requested areas and which kind of trips the users do most in different areas. To also make use of the power of the digital twins onto their corresponding physical device a mechanism of battery conservation is put in place to guarantee a long lasting battery life by limiting speed when the battery is too low and a remote locking and disabling mechanism that activates when the scooter is outside of the recovery service area or when the battery is below the minimum threshold to guarantee the device not to turn off. Monitoring will be made possible through an admin dashboard that show the overall state of all the devices in real-time.","title":"Scenario"},{"location":"index.html#course-requirements","text":"The system will be designed with a domain driven approach. In detail the team will have: an initial knowledge crunching session (with fake domain experts) the definition, mantain and use of the ubiquitous language a requirement analysis, carried out through user stories and use-case diagrams bounded context partitioning and definition of a context-map domain models for each relevant bounded context Apart from that the project will follow a developement process based on continuos integration & deployment for most of the system components. The tools used will be: Dotnet CLI for build automation Github Actions for continuous integration Github Pages for the hosting of the automatic generated documentation Microsoft Azure as a target platform for the deployment of the whole system Quality Assurance tools to be defined during developement (linter, automatic testing etc.)","title":"Course requirements"},{"location":"CONTRIBUTING.html","text":"Contributing to the documentation Preview the results You can use Docker to install and run the website generation tool . Download the docker image docker pull deloo/markdown-docs Generate the website docker run -e \"WORKSPACE=/workspace\" -v \"<Absolute-Path-To-The-Repo>:/workspace\" markdown-docs \"./\" \"dest/\" !> Clean the output directory before each new generation with rmdir dest /s /q (on Windows). !> Remember to replace <Absolute-Path-To-The-Repo> . See the result explorer dest\\index.html","title":"Contributing to the documentation"},{"location":"CONTRIBUTING.html#contributing-to-the-documentation","text":"","title":"Contributing to the documentation"},{"location":"CONTRIBUTING.html#preview-the-results","text":"You can use Docker to install and run the website generation tool .","title":"Preview the results"},{"location":"CONTRIBUTING.html#download-the-docker-image","text":"docker pull deloo/markdown-docs","title":"Download the docker image"},{"location":"CONTRIBUTING.html#generate-the-website","text":"docker run -e \"WORKSPACE=/workspace\" -v \"<Absolute-Path-To-The-Repo>:/workspace\" markdown-docs \"./\" \"dest/\" !> Clean the output directory before each new generation with rmdir dest /s /q (on Windows). !> Remember to replace <Absolute-Path-To-The-Repo> .","title":"Generate the website"},{"location":"CONTRIBUTING.html#see-the-result","text":"explorer dest\\index.html","title":"See the result"},{"location":"SUMMARY.html","text":"Introduction Domain Exploration Requirement Analysis Domain Analysis Architecture Design DevOps Engineering Implementation Conclusions","title":"SUMMARY"},{"location":"devops-engineering.html","text":"DevOps Engineering DevOps is considered a fundamental part of a microservice based system. In this section, we will discuss the tools and methodologies put in practice by the team. Licenses Each piece of software made is provided under the MIT License , which makes it FOSS . Versioning Each of the softwares developed is versioned with the Semantic Versioning system. We used git annotated tags to declare new versions, and based our release system on that. We created a tool that searches for the latest tag and generates a version for our build automation. Software Build Lifecycle Every step of the software build lifecycle was automated through Git and GitHub Actions . GitHub Actions offers hosted containers (called runners ) that run many kind of scripts divided in flows and tasks, in an imperative fashion. Many script reuse techniques are possible. We used: Custom Actions Repository templating Principles adopted These are the principles we adopted for every repository: Commits should adhere at the Imperative tense, impersonal form. Versions are managed with git tags, specifically in the form v#.#.# . At each push, software build and tests are performed. When a new tag is pushed, after a succefful test job, a release is performed. Released happen on GitHub Release page and trigger a deploy. We used Azure Cloud as our deploy destination for each software components, so that part of the workflow is shared between similar projects. Consistency between .NET compilation target, runtime target, build-time dotnet version. GitHub Actions Workflows Workflows define the automation processes of a repository. An example of a workflow we created and used can be found here . Workflows are composed by jobs which can run concurrently or in sequence based on a graph of dependencies between each other. Each job is composed by a sequence of steps to be made. Steps can fail, when it happens normally the job is interrupted and flagged as failed. Steps can run scripts or actions. Every action takes care of one build step. Some custom actions aggregate repeated steps into a single one (see Composite Actions ). Actions we developed in first person Some members of the team had previously developed custom GitHub Actions for their projects and reused them for EScooter. These are: Markdown Docs - Generates a website from markdown files. SemVer Checkout - Checkouts the full history of a repo to determine the software version with semantic versioning. SemVer Release - Creates a GitHub release of the software artifacts using its semantic version, generating a changelog. Dotnet build - Runs dotnet restore & dotnet build. Microservice Build Job - Runs multiple actions to build a microservice for test and release. Publish Webapp on Azure Job - Deploys a microservice/webapp application on Azure Cloud. Dotnet Test - Runs the tests with dotnet. Repository templates Repository templates allow a faster bootstrap phase of a project, scaffolding a hello world version of the program to be developed. This includes the automatic generation of the build lifecycle from the very first commit. The template we made for every EScooter Azure Function can be found here . Microservice template A template we used for microservices but we made for a different project can be found here . It makes use of the Clean Architecture library we made. Other tools We created a script for the Git Bash that adds a git release command to git to quickly create new patch, new minor or new major versions of our software based on the repository history. The code can be found at https://github.com/francescodente/git-release. Quality control We configured each C# project with a consistent style rulesheet inside the .editorconfig file. StyleCop Analyzers takes care of enforncing the style we designed both during development and during automated builds. Check Style warnings are treated as errors. Documentation Tools We automated documentation generation of both the architecture of the system (in this repository) and the API of our microservices with a Swagger plugin for ASP.NET (see the Rent Service API docs as an example). Ignored aspects Public repository (NuGet) Given the fact that we didn't develop libraries, but only single-purpose services and functions, we didn't use NuGet. Dependency inspection/automatic management We voluntarily ignored the real-time dependency and vulnerability management because of the finite scope of the project. We instead used automatic dependancy and vulnerability management offered by GitHub (such as Dependabot) in some previously made actions, such as Markdown Docs , which Luca Deluigi is actively maintaining as one of his OS projects. See the dependabot configuration file . Dependabot creates automatic pull requests that suggest dependency updates. We wanted to avoid receiving those PRs forever. Missing Code coverage -> slide Static Code Analysis Unit tests Badges -> floss , ci test results, coverage, code analysis, size, version... see shields.io","title":"DevOps Engineering"},{"location":"devops-engineering.html#devops-engineering","text":"DevOps is considered a fundamental part of a microservice based system. In this section, we will discuss the tools and methodologies put in practice by the team.","title":"DevOps Engineering"},{"location":"devops-engineering.html#licenses","text":"Each piece of software made is provided under the MIT License , which makes it FOSS .","title":"Licenses"},{"location":"devops-engineering.html#versioning","text":"Each of the softwares developed is versioned with the Semantic Versioning system. We used git annotated tags to declare new versions, and based our release system on that. We created a tool that searches for the latest tag and generates a version for our build automation.","title":"Versioning"},{"location":"devops-engineering.html#software-build-lifecycle","text":"Every step of the software build lifecycle was automated through Git and GitHub Actions . GitHub Actions offers hosted containers (called runners ) that run many kind of scripts divided in flows and tasks, in an imperative fashion. Many script reuse techniques are possible. We used: Custom Actions Repository templating","title":"Software Build Lifecycle"},{"location":"devops-engineering.html#principles-adopted","text":"These are the principles we adopted for every repository: Commits should adhere at the Imperative tense, impersonal form. Versions are managed with git tags, specifically in the form v#.#.# . At each push, software build and tests are performed. When a new tag is pushed, after a succefful test job, a release is performed. Released happen on GitHub Release page and trigger a deploy. We used Azure Cloud as our deploy destination for each software components, so that part of the workflow is shared between similar projects. Consistency between .NET compilation target, runtime target, build-time dotnet version.","title":"Principles adopted"},{"location":"devops-engineering.html#github-actions-workflows","text":"Workflows define the automation processes of a repository. An example of a workflow we created and used can be found here . Workflows are composed by jobs which can run concurrently or in sequence based on a graph of dependencies between each other. Each job is composed by a sequence of steps to be made. Steps can fail, when it happens normally the job is interrupted and flagged as failed. Steps can run scripts or actions. Every action takes care of one build step. Some custom actions aggregate repeated steps into a single one (see Composite Actions ). Actions we developed in first person Some members of the team had previously developed custom GitHub Actions for their projects and reused them for EScooter. These are: Markdown Docs - Generates a website from markdown files. SemVer Checkout - Checkouts the full history of a repo to determine the software version with semantic versioning. SemVer Release - Creates a GitHub release of the software artifacts using its semantic version, generating a changelog. Dotnet build - Runs dotnet restore & dotnet build. Microservice Build Job - Runs multiple actions to build a microservice for test and release. Publish Webapp on Azure Job - Deploys a microservice/webapp application on Azure Cloud. Dotnet Test - Runs the tests with dotnet.","title":"GitHub Actions Workflows"},{"location":"devops-engineering.html#repository-templates","text":"Repository templates allow a faster bootstrap phase of a project, scaffolding a hello world version of the program to be developed. This includes the automatic generation of the build lifecycle from the very first commit. The template we made for every EScooter Azure Function can be found here . Microservice template A template we used for microservices but we made for a different project can be found here . It makes use of the Clean Architecture library we made.","title":"Repository templates"},{"location":"devops-engineering.html#other-tools","text":"We created a script for the Git Bash that adds a git release command to git to quickly create new patch, new minor or new major versions of our software based on the repository history. The code can be found at https://github.com/francescodente/git-release.","title":"Other tools"},{"location":"devops-engineering.html#quality-control","text":"We configured each C# project with a consistent style rulesheet inside the .editorconfig file. StyleCop Analyzers takes care of enforncing the style we designed both during development and during automated builds. Check Style warnings are treated as errors.","title":"Quality control"},{"location":"devops-engineering.html#documentation-tools","text":"We automated documentation generation of both the architecture of the system (in this repository) and the API of our microservices with a Swagger plugin for ASP.NET (see the Rent Service API docs as an example).","title":"Documentation Tools"},{"location":"devops-engineering.html#ignored-aspects","text":"","title":"Ignored aspects"},{"location":"devops-engineering.html#public-repository-nuget","text":"Given the fact that we didn't develop libraries, but only single-purpose services and functions, we didn't use NuGet.","title":"Public repository (NuGet)"},{"location":"devops-engineering.html#dependency-inspectionautomatic-management","text":"We voluntarily ignored the real-time dependency and vulnerability management because of the finite scope of the project. We instead used automatic dependancy and vulnerability management offered by GitHub (such as Dependabot) in some previously made actions, such as Markdown Docs , which Luca Deluigi is actively maintaining as one of his OS projects. See the dependabot configuration file . Dependabot creates automatic pull requests that suggest dependency updates. We wanted to avoid receiving those PRs forever.","title":"Dependency inspection/automatic management"},{"location":"devops-engineering.html#missing","text":"Code coverage -> slide Static Code Analysis Unit tests Badges -> floss , ci test results, coverage, code analysis, size, version... see shields.io","title":"Missing"},{"location":"implementation.html","text":"Implementation In this section is explained how are organized and implemented the parts of the system. Backend - Microsoft Azure Backend is fully deployed on Microsoft Azure: each resource is under the e-scooter group. Naming Convention The usual naming convention used under this group is kebab case . Below the list of main resources' name deployed on Azure: The Scooter Physical Control IoT Hub is named scooter-iot-hub The Digital Twin Layer is named scooter-digital-twins The Scooter Event Grid is named device-events The Scooter Event Bus is named scooter-event-bus The topic used for events generated from any microservice is named production/service-events Every subscription name should be named after the subscriber name inside Azure Azure Functions should be named with the Domain model and the specific usage, if exists; manage represents functions that update the Digital Twin. Microservice should be named with the Domain model followed by -service Microservice Microservices are function with a status, usually implemented with a database: Rent service Functions Our functions are the link between different services: scooter control even if it's implemented as an Azure function, its composition with IotHub (of which extends functionalities) can be considered logically a service scooter monitor rent payment (mock) manage customer manage rents manage telemetry updates manage devices manage reported properties manage scooter availability Frontend Admin frontend The Admin frontend is implemented in angular: polling the Digital Twin Layer, it shows the scooters in a 2D map. Clicking on a scooter is possible to check the its status and allow to enable or disable it. This features are implemented using angular services. Customer frontend The Customer frontend is implemented in C# using Windows Forms: it allows to rent an available scooter from a list. Scooter data The Scooter data is a mock implementation of the real creation of a scooter: it enable to insert or remove a new scooter in the system. Device emulator The Device emulator is the C# mock implementation of the usage of each scooter: it moves the scooters and uses the battery.","title":"Implementation"},{"location":"implementation.html#implementation","text":"In this section is explained how are organized and implemented the parts of the system.","title":"Implementation"},{"location":"implementation.html#backend-microsoft-azure","text":"Backend is fully deployed on Microsoft Azure: each resource is under the e-scooter group.","title":"Backend - Microsoft Azure"},{"location":"implementation.html#naming-convention","text":"The usual naming convention used under this group is kebab case . Below the list of main resources' name deployed on Azure: The Scooter Physical Control IoT Hub is named scooter-iot-hub The Digital Twin Layer is named scooter-digital-twins The Scooter Event Grid is named device-events The Scooter Event Bus is named scooter-event-bus The topic used for events generated from any microservice is named production/service-events Every subscription name should be named after the subscriber name inside Azure Azure Functions should be named with the Domain model and the specific usage, if exists; manage represents functions that update the Digital Twin. Microservice should be named with the Domain model followed by -service","title":"Naming Convention"},{"location":"implementation.html#microservice","text":"Microservices are function with a status, usually implemented with a database: Rent service","title":"Microservice"},{"location":"implementation.html#functions","text":"Our functions are the link between different services: scooter control even if it's implemented as an Azure function, its composition with IotHub (of which extends functionalities) can be considered logically a service scooter monitor rent payment (mock) manage customer manage rents manage telemetry updates manage devices manage reported properties manage scooter availability","title":"Functions"},{"location":"implementation.html#frontend","text":"","title":"Frontend"},{"location":"implementation.html#admin-frontend","text":"The Admin frontend is implemented in angular: polling the Digital Twin Layer, it shows the scooters in a 2D map. Clicking on a scooter is possible to check the its status and allow to enable or disable it. This features are implemented using angular services.","title":"Admin frontend"},{"location":"implementation.html#customer-frontend","text":"The Customer frontend is implemented in C# using Windows Forms: it allows to rent an available scooter from a list.","title":"Customer frontend"},{"location":"implementation.html#scooter-data","text":"The Scooter data is a mock implementation of the real creation of a scooter: it enable to insert or remove a new scooter in the system.","title":"Scooter data"},{"location":"implementation.html#device-emulator","text":"The Device emulator is the C# mock implementation of the usage of each scooter: it moves the scooters and uses the battery.","title":"Device emulator"},{"location":"API/v0/paginate.html","text":"a paginated response includes a field meta as the following: { \"meta\" : { \"pageNum\" : i nte ger , \"pageSize\" : i nte ger , \"next\" : s tr i n g } }","title":"Paginate"},{"location":"API/v0/template.html","text":"Context API /path/{urlParams} URL Parameters - urlParams : description GET description Query Parameters - Name : description Body { \"field\" : t ype //Commo n Value } Response Code ***: { \"field\" : t ype //Commo n Value } POST PUT DELETE Outgoing Events Name Fires when { \"field\" : t ype //Commo n Value } Commands Name Subscriptions Service EventName","title":"Context"},{"location":"API/v0/template.html#context","text":"","title":"Context"},{"location":"API/v0/template.html#api","text":"","title":"API"},{"location":"API/v0/template.html#pathurlparams","text":"URL Parameters - urlParams : description","title":"/path/{urlParams}"},{"location":"API/v0/template.html#get","text":"description Query Parameters - Name : description Body { \"field\" : t ype //Commo n Value } Response Code ***: { \"field\" : t ype //Commo n Value }","title":"GET"},{"location":"API/v0/template.html#post","text":"","title":"POST"},{"location":"API/v0/template.html#put","text":"","title":"PUT"},{"location":"API/v0/template.html#delete","text":"","title":"DELETE"},{"location":"API/v0/template.html#outgoing-events","text":"","title":"Outgoing Events"},{"location":"API/v0/template.html#name","text":"Fires when { \"field\" : t ype //Commo n Value }","title":"Name"},{"location":"API/v0/template.html#commands","text":"","title":"Commands"},{"location":"API/v0/template.html#name_1","text":"","title":"Name"},{"location":"API/v0/template.html#subscriptions","text":"","title":"Subscriptions"},{"location":"API/v0/template.html#service","text":"EventName","title":"Service"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html","text":"Area of Service API /areas GET Returns a list of Areas of service. Query Parameters - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] } POST Creates a new Area of Service. Body { \"shape\" : objec t //Shape } Response Code 201: { \"id\" : s tr i n g , //E nt i t yId \"shape\" : objec t //Shape } Code 400 /areas/{id} URL Parameters - id : the EntityId that identifies the requested area. GET get the properties of an existing area. Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"shape\" : objec t , //Shape \"scooters\" : Se t [ s tr i n g ] //Se t [ E nt i t yId ] } Code 400 Code 404 PUT Modify the properties of an existing area. Body { \"shape\" : objec t //Shape } Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"shape\" : objec t //Shape } Code 400 Code 404 DELETE Removes an Area of Service identified by id. Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"shape\" : objec t //Shape } Code 404 /areas/{areaId}?contains={scooterId} URL Parameters - areaId : the EntityId that identifies the area in which to search Query Parameters - contains : the EntityId that identifies the requested scooter GET Returns whether a scooter belonging to an area is currently inside tha area boundary. Response Code 200: { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g , //E nt i t yId \"isInArea\" : boolea n } Code 404: if the scooter doesn't belong to the selected area or the area doesn't exist. /scooters/{id}?belongsTo={areaId} GET Returns whether a scooter belongs to an Area of Service. URL Parameters - scooterId : the EntityId that identifies the requested scooter Query Parameters - belongsTo : the EntityId that identifies the area in which to search Response Code 200: { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g , //E nt i t yId \"belongsToArea\" : boolea n } Code 404: if the scooter or the area doesn't exist. Outgoing Events AreaCreated Fires when a new area is added to the System. { \"id\" : s tr i n g //E nt i t yId } AreaDeleted Fires when a new area is removed from the System. { \"id\" : s tr i n g //E nt i t yId } AreaShapeChanged Fires when the shape of an existing area is modified. { \"id\" : s tr i n g //E nt i t yId } ScooterAssignedToArea Fires when an existing scooter is assigned to an area of service. { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g //E nt i t yId } ScooterRemovedFromArea Fires when an existing scooter is removed from an area of service. { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g //E nt i t yId } ScooterWentOutsideArea Fires when an existing scooter exits from the boundary of its area of service. { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g //E nt i t yId } ScooterReturnedInsideArea Fires when an existing scooter is put back inside the boundary of its area of service. { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g //E nt i t yId } Subscriptions Scooter Data ScooterCreated ScooterDeleted","title":"Area of Service"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#area-of-service","text":"","title":"Area of Service"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#api","text":"","title":"API"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#areas","text":"","title":"/areas"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#get","text":"Returns a list of Areas of service. Query Parameters - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] }","title":"GET"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#post","text":"Creates a new Area of Service. Body { \"shape\" : objec t //Shape } Response Code 201: { \"id\" : s tr i n g , //E nt i t yId \"shape\" : objec t //Shape } Code 400","title":"POST"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#areasid","text":"URL Parameters - id : the EntityId that identifies the requested area.","title":"/areas/{id}"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#get_1","text":"get the properties of an existing area. Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"shape\" : objec t , //Shape \"scooters\" : Se t [ s tr i n g ] //Se t [ E nt i t yId ] } Code 400 Code 404","title":"GET"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#put","text":"Modify the properties of an existing area. Body { \"shape\" : objec t //Shape } Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"shape\" : objec t //Shape } Code 400 Code 404","title":"PUT"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#delete","text":"Removes an Area of Service identified by id. Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"shape\" : objec t //Shape } Code 404","title":"DELETE"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#areasareaidcontainsscooterid","text":"URL Parameters - areaId : the EntityId that identifies the area in which to search Query Parameters - contains : the EntityId that identifies the requested scooter","title":"/areas/{areaId}?contains={scooterId}"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#get_2","text":"Returns whether a scooter belonging to an area is currently inside tha area boundary. Response Code 200: { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g , //E nt i t yId \"isInArea\" : boolea n } Code 404: if the scooter doesn't belong to the selected area or the area doesn't exist.","title":"GET"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#scootersidbelongstoareaid","text":"","title":"/scooters/{id}?belongsTo={areaId}"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#get_3","text":"Returns whether a scooter belongs to an Area of Service. URL Parameters - scooterId : the EntityId that identifies the requested scooter Query Parameters - belongsTo : the EntityId that identifies the area in which to search Response Code 200: { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g , //E nt i t yId \"belongsToArea\" : boolea n } Code 404: if the scooter or the area doesn't exist.","title":"GET"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#outgoing-events","text":"","title":"Outgoing Events"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#areacreated","text":"Fires when a new area is added to the System. { \"id\" : s tr i n g //E nt i t yId }","title":"AreaCreated"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#areadeleted","text":"Fires when a new area is removed from the System. { \"id\" : s tr i n g //E nt i t yId }","title":"AreaDeleted"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#areashapechanged","text":"Fires when the shape of an existing area is modified. { \"id\" : s tr i n g //E nt i t yId }","title":"AreaShapeChanged"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#scooterassignedtoarea","text":"Fires when an existing scooter is assigned to an area of service. { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g //E nt i t yId }","title":"ScooterAssignedToArea"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#scooterremovedfromarea","text":"Fires when an existing scooter is removed from an area of service. { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g //E nt i t yId }","title":"ScooterRemovedFromArea"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#scooterwentoutsidearea","text":"Fires when an existing scooter exits from the boundary of its area of service. { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g //E nt i t yId }","title":"ScooterWentOutsideArea"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#scooterreturnedinsidearea","text":"Fires when an existing scooter is put back inside the boundary of its area of service. { \"areaId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g //E nt i t yId }","title":"ScooterReturnedInsideArea"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#subscriptions","text":"","title":"Subscriptions"},{"location":"API/v0/E-Scooter/Area%20of%20Service.html#scooter-data","text":"ScooterCreated ScooterDeleted","title":"Scooter Data"},{"location":"API/v0/E-Scooter/Scooter%20Control.html","text":"Scooter Control Outgoing Events ScooterUnlocked Fires when a scooter is unlocked { \"id\" : s tr i n g //E nt i t yId } ScooterLocked Fires when a scooter is locked { \"id\" : s tr i n g //E nt i t yId } ScooterEnabled Fires when a scooter is enabled { \"id\" : s tr i n g //E nt i t yId } ScooterDisabled Fires when a scooter is disabled { \"id\" : s tr i n g //E nt i t yId } ScooterPowerModeChanged Fires when the power mode of a scooter is changed { \"id\" : s tr i n g , //E nt i t yId \"powerMode\" : s tr i n g //PowerMode } ScooterMaxSpeedChanged Fires when when the max speed of a scooter is changed { \"id\" : s tr i n g , //E nt i t yId \"maxSpeed\" : nu mber //Speed } Subscriptions Scooter Data ScooterCreated ScooterDeleted Area of Service ScooterWentOutsideArea ScooterReturnedInsideArea ScooterRemovedFromArea ScooterAssignedToArea","title":"Scooter Control"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#scooter-control","text":"","title":"Scooter Control"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#outgoing-events","text":"","title":"Outgoing Events"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#scooterunlocked","text":"Fires when a scooter is unlocked { \"id\" : s tr i n g //E nt i t yId }","title":"ScooterUnlocked"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#scooterlocked","text":"Fires when a scooter is locked { \"id\" : s tr i n g //E nt i t yId }","title":"ScooterLocked"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#scooterenabled","text":"Fires when a scooter is enabled { \"id\" : s tr i n g //E nt i t yId }","title":"ScooterEnabled"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#scooterdisabled","text":"Fires when a scooter is disabled { \"id\" : s tr i n g //E nt i t yId }","title":"ScooterDisabled"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#scooterpowermodechanged","text":"Fires when the power mode of a scooter is changed { \"id\" : s tr i n g , //E nt i t yId \"powerMode\" : s tr i n g //PowerMode }","title":"ScooterPowerModeChanged"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#scootermaxspeedchanged","text":"Fires when when the max speed of a scooter is changed { \"id\" : s tr i n g , //E nt i t yId \"maxSpeed\" : nu mber //Speed }","title":"ScooterMaxSpeedChanged"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#subscriptions","text":"","title":"Subscriptions"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#scooter-data","text":"ScooterCreated ScooterDeleted","title":"Scooter Data"},{"location":"API/v0/E-Scooter/Scooter%20Control.html#area-of-service","text":"ScooterWentOutsideArea ScooterReturnedInsideArea ScooterRemovedFromArea ScooterAssignedToArea","title":"Area of Service"},{"location":"API/v0/E-Scooter/Scooter%20Data.html","text":"Scooter Data API /scooters GET Returns a list of Scooters. Query Params - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] } POST Creates a new Scooter. Body { \"id\" : s tr i n g , //E nt i t yId \"serialNumber\" : s tr i n g , //SerialNumber \"weight\" : i nte ger , //Weigh t \"model\" : s tr i n g , //ModelI nf o } Response Code 201: { \"id\" : s tr i n g //E nt i t yId } Code 400 /scooters/{id} URL Parameters - id : the EntityId that identifies the requested scooter. GET Returns the detail of the specified scooter. Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"serialNumber\" : s tr i n g , // SerialNumber \"weight\" : i nte ger , //Weigh t \"model\" : s tr i n g , //ModelI nf o } Code 404 DELETE Removes the specified scooter. Response Code 200: { \"id\" : s tr i n g //E nt i t yId } Code 404 Outgoing Events ScooterCreated Fires when a new scooter is added to the System. { \"id\" : s tr i n g //E nt i t yId } ScooterDeleted Fires when a new scooter is removed from the System. { \"id\" : s tr i n g //E nt i t yId }","title":"Scooter Data"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#scooter-data","text":"","title":"Scooter Data"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#api","text":"","title":"API"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#scooters","text":"","title":"/scooters"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#get","text":"Returns a list of Scooters. Query Params - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] }","title":"GET"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#post","text":"Creates a new Scooter. Body { \"id\" : s tr i n g , //E nt i t yId \"serialNumber\" : s tr i n g , //SerialNumber \"weight\" : i nte ger , //Weigh t \"model\" : s tr i n g , //ModelI nf o } Response Code 201: { \"id\" : s tr i n g //E nt i t yId } Code 400","title":"POST"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#scootersid","text":"URL Parameters - id : the EntityId that identifies the requested scooter.","title":"/scooters/{id}"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#get_1","text":"Returns the detail of the specified scooter. Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"serialNumber\" : s tr i n g , // SerialNumber \"weight\" : i nte ger , //Weigh t \"model\" : s tr i n g , //ModelI nf o } Code 404","title":"GET"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#delete","text":"Removes the specified scooter. Response Code 200: { \"id\" : s tr i n g //E nt i t yId } Code 404","title":"DELETE"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#outgoing-events","text":"","title":"Outgoing Events"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#scootercreated","text":"Fires when a new scooter is added to the System. { \"id\" : s tr i n g //E nt i t yId }","title":"ScooterCreated"},{"location":"API/v0/E-Scooter/Scooter%20Data.html#scooterdeleted","text":"Fires when a new scooter is removed from the System. { \"id\" : s tr i n g //E nt i t yId }","title":"ScooterDeleted"},{"location":"API/v0/E-Scooter/Scooter%20Physical%20Control.html","text":"Scooter Physical Control Outgoing Events ScooterPosition Fires each every predefined certain time { \"id\" : s tr i n g , //E nt i t yId \"position\" : objec t , //Geopoi nt } Subscriptions Scooter Control ScooterUnlocked ScooterLocked ScooterEnabled ScooterDisabled ScooterPoweModeChanged ScooterMaxSpeedChanged","title":"Scooter Physical Control"},{"location":"API/v0/E-Scooter/Scooter%20Physical%20Control.html#scooter-physical-control","text":"","title":"Scooter Physical Control"},{"location":"API/v0/E-Scooter/Scooter%20Physical%20Control.html#outgoing-events","text":"","title":"Outgoing Events"},{"location":"API/v0/E-Scooter/Scooter%20Physical%20Control.html#scooterposition","text":"Fires each every predefined certain time { \"id\" : s tr i n g , //E nt i t yId \"position\" : objec t , //Geopoi nt }","title":"ScooterPosition"},{"location":"API/v0/E-Scooter/Scooter%20Physical%20Control.html#subscriptions","text":"","title":"Subscriptions"},{"location":"API/v0/E-Scooter/Scooter%20Physical%20Control.html#scooter-control","text":"ScooterUnlocked ScooterLocked ScooterEnabled ScooterDisabled ScooterPoweModeChanged ScooterMaxSpeedChanged","title":"Scooter Control"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html","text":"Drop Points Planning API /DropPoints GET Returns the list of the best drop points Query Parameters - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] } /DropPoints/{id} URL Parameters - id : the EntityId that identifies the requested drop point. GET get the properties of an existing drop point Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"position\" : objec t , //GeoPoi nt \"scooterNumber\" : nu mber } Code 400 Code 404 Subscriptions Area of Servie AreaCreated AreaDeleted AreaShapeChanged ScooterAssignedToArea ScooterRemovedFromArea Trip TripStarted TripEnded Rent RentConfirmed RentStopped","title":"Drop Points Planning"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#drop-points-planning","text":"","title":"Drop Points Planning"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#api","text":"","title":"API"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#droppoints","text":"","title":"/DropPoints"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#get","text":"Returns the list of the best drop points Query Parameters - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] }","title":"GET"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#droppointsid","text":"URL Parameters - id : the EntityId that identifies the requested drop point.","title":"/DropPoints/{id}"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#get_1","text":"get the properties of an existing drop point Response Code 200: { \"id\" : s tr i n g , //E nt i t yId \"position\" : objec t , //GeoPoi nt \"scooterNumber\" : nu mber } Code 400 Code 404","title":"GET"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#subscriptions","text":"","title":"Subscriptions"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#area-of-servie","text":"AreaCreated AreaDeleted AreaShapeChanged ScooterAssignedToArea ScooterRemovedFromArea","title":"Area of Servie"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#trip","text":"TripStarted TripEnded","title":"Trip"},{"location":"API/v0/Insight/Drop%20Points%20Planning.html#rent","text":"RentConfirmed RentStopped","title":"Rent"},{"location":"API/v0/Rent/Rent%20Payment.html","text":"Rent Payment Outgoing Events RentAuthorized Fires when a rent is authorized { \"rentId\" : s tr i n g //E nt i t yId } RentNotAuthorized Fires when a rent is authorized { \"rentId\" : s tr i n g //E nt i t yId } CreditExhaustedForRent Fires when the credit isn't enough to continue the rent { \"rentId\" : s tr i n g //E nt i t yId } Subscriptions Rent RentRequested RentConfirmed RentStopped","title":"Rent Payment"},{"location":"API/v0/Rent/Rent%20Payment.html#rent-payment","text":"","title":"Rent Payment"},{"location":"API/v0/Rent/Rent%20Payment.html#outgoing-events","text":"","title":"Outgoing Events"},{"location":"API/v0/Rent/Rent%20Payment.html#rentauthorized","text":"Fires when a rent is authorized { \"rentId\" : s tr i n g //E nt i t yId }","title":"RentAuthorized"},{"location":"API/v0/Rent/Rent%20Payment.html#rentnotauthorized","text":"Fires when a rent is authorized { \"rentId\" : s tr i n g //E nt i t yId }","title":"RentNotAuthorized"},{"location":"API/v0/Rent/Rent%20Payment.html#creditexhaustedforrent","text":"Fires when the credit isn't enough to continue the rent { \"rentId\" : s tr i n g //E nt i t yId }","title":"CreditExhaustedForRent"},{"location":"API/v0/Rent/Rent%20Payment.html#subscriptions","text":"","title":"Subscriptions"},{"location":"API/v0/Rent/Rent%20Payment.html#rent","text":"RentRequested RentConfirmed RentStopped","title":"Rent"},{"location":"API/v0/Rent/Rent.html","text":"Rent API /rents GET Returns a list of Rents. Query Parameters - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] } /rents/{rentId} URL Parameters - rentId : the EntityId that identifies the requested rent GET Requests the end of a rent Response Code 201: { \"scooterId\" : s tr i n g , //E nt i t yId \"customerId\" : s tr i n g , //E nt i t yId \"rentId\" : s tr i n g , //E nt i t yId \"confirmed\" : boolea n , \"end\" : boolea n } Code 404 /scooter/{scooterId}/rent URL Parameters - scooterId : the EntityId that identifies the requested scooter POST Requests the start of a rent Body { \"customerId\" : s tr i n g //E nt i t yId } Response Code 201: { \"scooterId\" : s tr i n g , //E nt i t yId \"customerId\" : s tr i n g , //E nt i t yId \"rentId\" : s tr i n g , //E nt i t yId } Code 404 Code 400 /rents/stop/{rentId} URL Parameters - rentId : the EntityId that identifies the requested rent POST Requests the end of a rent Response Code 201: { \"rentId\" : s tr i n g , //E nt i t yId } Code 404 Outgoing Events RentRequested Fires when a rent is created but still not confirmed { \"rentId\" : s tr i n g , //E nt i t yId } RentConfirmed Fires when a rent is confirmed { /* TODO ci va nn o? \"scooterId\" : s tr i n g , //E nt i t yId \"customerId\" : s tr i n g , //E nt i t yId */ \"rentId\" : s tr i n g , //E nt i t yId \"confirm\" : nu mber //Times ta mp } RentStopped Fires when a rent is stopped for the reason specified in the body { \"rentId\" : s tr i n g , //E nt i t yId \"reason\" : s tr i n g , //Re nt E n dReaso n \"stop\" : nu mber //Times ta mp } Subscriptions ScooterData ScooterCreated ScooterDeleted Rent Payment RentAuthorized RentNotAuthorized CreditExhaustedForRent","title":"Rent"},{"location":"API/v0/Rent/Rent.html#rent","text":"","title":"Rent"},{"location":"API/v0/Rent/Rent.html#api","text":"","title":"API"},{"location":"API/v0/Rent/Rent.html#rents","text":"","title":"/rents"},{"location":"API/v0/Rent/Rent.html#get","text":"Returns a list of Rents. Query Parameters - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] }","title":"GET"},{"location":"API/v0/Rent/Rent.html#rentsrentid","text":"URL Parameters - rentId : the EntityId that identifies the requested rent","title":"/rents/{rentId}"},{"location":"API/v0/Rent/Rent.html#get_1","text":"Requests the end of a rent Response Code 201: { \"scooterId\" : s tr i n g , //E nt i t yId \"customerId\" : s tr i n g , //E nt i t yId \"rentId\" : s tr i n g , //E nt i t yId \"confirmed\" : boolea n , \"end\" : boolea n } Code 404","title":"GET"},{"location":"API/v0/Rent/Rent.html#scooterscooteridrent","text":"URL Parameters - scooterId : the EntityId that identifies the requested scooter","title":"/scooter/{scooterId}/rent"},{"location":"API/v0/Rent/Rent.html#post","text":"Requests the start of a rent Body { \"customerId\" : s tr i n g //E nt i t yId } Response Code 201: { \"scooterId\" : s tr i n g , //E nt i t yId \"customerId\" : s tr i n g , //E nt i t yId \"rentId\" : s tr i n g , //E nt i t yId } Code 404 Code 400","title":"POST"},{"location":"API/v0/Rent/Rent.html#rentsstoprentid","text":"URL Parameters - rentId : the EntityId that identifies the requested rent","title":"/rents/stop/{rentId}"},{"location":"API/v0/Rent/Rent.html#post_1","text":"Requests the end of a rent Response Code 201: { \"rentId\" : s tr i n g , //E nt i t yId } Code 404","title":"POST"},{"location":"API/v0/Rent/Rent.html#outgoing-events","text":"","title":"Outgoing Events"},{"location":"API/v0/Rent/Rent.html#rentrequested","text":"Fires when a rent is created but still not confirmed { \"rentId\" : s tr i n g , //E nt i t yId }","title":"RentRequested"},{"location":"API/v0/Rent/Rent.html#rentconfirmed","text":"Fires when a rent is confirmed { /* TODO ci va nn o? \"scooterId\" : s tr i n g , //E nt i t yId \"customerId\" : s tr i n g , //E nt i t yId */ \"rentId\" : s tr i n g , //E nt i t yId \"confirm\" : nu mber //Times ta mp }","title":"RentConfirmed"},{"location":"API/v0/Rent/Rent.html#rentstopped","text":"Fires when a rent is stopped for the reason specified in the body { \"rentId\" : s tr i n g , //E nt i t yId \"reason\" : s tr i n g , //Re nt E n dReaso n \"stop\" : nu mber //Times ta mp }","title":"RentStopped"},{"location":"API/v0/Rent/Rent.html#subscriptions","text":"","title":"Subscriptions"},{"location":"API/v0/Rent/Rent.html#scooterdata","text":"ScooterCreated ScooterDeleted","title":"ScooterData"},{"location":"API/v0/Rent/Rent.html#rent-payment","text":"RentAuthorized RentNotAuthorized CreditExhaustedForRent","title":"Rent Payment"},{"location":"API/v0/Rent/Trip.html","text":"Trip API /trips GET Returns a list of Trips. Query Parameters - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] } POST Creates a new Trip. Body { \"rentId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g , //E nt i t yId } Response Code 201: { \"id\" : s tr i n g , //E nt i t yId } Code 400 /trips/{id} URL Parameters - id : the EntityId that identifies the requested trip. GET get the properties of an existing trip Response Code 200: { \"id\" : s tr i n g , //E nt i t yId //TODO ges t ire s tart s t op come TripPoi nt ? \"start\" : objec t , //TripPoi nt \"stop\" : objec t , //TripPoi nt \"travelledDistance\" : nu mber //Dis tan ce } Code 400 Code 404 Outgoing Events TripStarted Fires when a new trip starts { \"id\" : s tr i n g , //E nt i t yId //TODO ges t ire s tart s t op come TripPoi nt ? \"start\" : objec t , //TripPoi nt } TripEnded Fires when a new trip ends { \"id\" : s tr i n g , //E nt i t yId //TODO ges t ire s tart s t op come TripPoi nt ? \"stop\" : objec t , //TripPoi nt } Subscriptions Scooter Data ScooterCreated ScooterDeleted Rent RentRequest RentConfirmed RentStopped","title":"Trip"},{"location":"API/v0/Rent/Trip.html#trip","text":"","title":"Trip"},{"location":"API/v0/Rent/Trip.html#api","text":"","title":"API"},{"location":"API/v0/Rent/Trip.html#trips","text":"","title":"/trips"},{"location":"API/v0/Rent/Trip.html#get","text":"Returns a list of Trips. Query Parameters - pageNum : number of requested page given the pageSize - pageSize : elements per page Response Code 200: paginated response { \"data\" : [ { \"id\" : s tr i n g //E nt i t yId } ] }","title":"GET"},{"location":"API/v0/Rent/Trip.html#post","text":"Creates a new Trip. Body { \"rentId\" : s tr i n g , //E nt i t yId \"scooterId\" : s tr i n g , //E nt i t yId } Response Code 201: { \"id\" : s tr i n g , //E nt i t yId } Code 400","title":"POST"},{"location":"API/v0/Rent/Trip.html#tripsid","text":"URL Parameters - id : the EntityId that identifies the requested trip.","title":"/trips/{id}"},{"location":"API/v0/Rent/Trip.html#get_1","text":"get the properties of an existing trip Response Code 200: { \"id\" : s tr i n g , //E nt i t yId //TODO ges t ire s tart s t op come TripPoi nt ? \"start\" : objec t , //TripPoi nt \"stop\" : objec t , //TripPoi nt \"travelledDistance\" : nu mber //Dis tan ce } Code 400 Code 404","title":"GET"},{"location":"API/v0/Rent/Trip.html#outgoing-events","text":"","title":"Outgoing Events"},{"location":"API/v0/Rent/Trip.html#tripstarted","text":"Fires when a new trip starts { \"id\" : s tr i n g , //E nt i t yId //TODO ges t ire s tart s t op come TripPoi nt ? \"start\" : objec t , //TripPoi nt }","title":"TripStarted"},{"location":"API/v0/Rent/Trip.html#tripended","text":"Fires when a new trip ends { \"id\" : s tr i n g , //E nt i t yId //TODO ges t ire s tart s t op come TripPoi nt ? \"stop\" : objec t , //TripPoi nt }","title":"TripEnded"},{"location":"API/v0/Rent/Trip.html#subscriptions","text":"","title":"Subscriptions"},{"location":"API/v0/Rent/Trip.html#scooter-data","text":"ScooterCreated ScooterDeleted","title":"Scooter Data"},{"location":"API/v0/Rent/Trip.html#rent","text":"RentRequest RentConfirmed RentStopped","title":"Rent"},{"location":"API/v1/index.html","text":"API v1 TODO - Link here","title":"API v1"},{"location":"API/v1/index.html#api-v1","text":"TODO - Link here","title":"API v1"},{"location":"Device%20Emulator/Requirements.html","text":"Device Emulator Requirements Emulate all the devices on a Iot Hub instance Fetch the list of all devices, periodically For each device, start an infinite emulation that lasts until a \"stop event\" is fired A stop event can be a keyboard interrupt or a C# method call The emulation consists of: Load device data Decide which property should be changed, why and how If the device is locked, do nothing If it's unlocked, randomly select an action: Do nothing Change position based on velocity (only if velocity is not 0) Change position and change velocity If it's moving, consume some battery If the battery is below the standby threshold go in standby mode Change the property values Submit the update to IoT Hub Note Emulating a device means firing a sequence of realistic updates on its reported properties on IoT Hub. We consider every device to be an E-Scooter . Can be executed both as script and as a library","title":"Device Emulator Requirements"},{"location":"Device%20Emulator/Requirements.html#device-emulator-requirements","text":"Emulate all the devices on a Iot Hub instance Fetch the list of all devices, periodically For each device, start an infinite emulation that lasts until a \"stop event\" is fired A stop event can be a keyboard interrupt or a C# method call The emulation consists of: Load device data Decide which property should be changed, why and how If the device is locked, do nothing If it's unlocked, randomly select an action: Do nothing Change position based on velocity (only if velocity is not 0) Change position and change velocity If it's moving, consume some battery If the battery is below the standby threshold go in standby mode Change the property values Submit the update to IoT Hub Note Emulating a device means firing a sequence of realistic updates on its reported properties on IoT Hub. We consider every device to be an E-Scooter . Can be executed both as script and as a library","title":"Device Emulator Requirements"},{"location":"Digital%20Twin%20Layer/Digital%20Twins.html","text":"Digital Twins Scooter DT Model { \"Properties\" : { \"Id\" : Id , \"Locked\" : Boolea n , \"Enabled\" : Boolea n , \"MaxSpeed\" : Number , \"UpdateFrequency\" : TimeSpa n , \"StandbyThreshold\" : Number , \"PowerSavingThreshold\" : Number , \"PowerSavingMode\" : S tr i n g }, \"Relationships\" : [ ], \"Telemetry\" : { \"Battery\" : Number , \"Speed\" : Number , \"Position\" : GeoPosi t io n }, \"Components\" : { } } Customer DT Model { \"Properties\" : { \"Id\" : Id }, \"Relationships\" : [ { \"displayName\" : \"uses\" , \"description\" : \"the customer is riding\" , \"target\" : Scoo ter , \"properties\" : { \"rentId\" : Id } } ], \"Telemetry\" : { }, \"Components\" : { } }","title":"Digital Twins"},{"location":"Digital%20Twin%20Layer/Digital%20Twins.html#digital-twins","text":"","title":"Digital Twins"},{"location":"Digital%20Twin%20Layer/Digital%20Twins.html#scooter-dt","text":"","title":"Scooter DT"},{"location":"Digital%20Twin%20Layer/Digital%20Twins.html#model","text":"{ \"Properties\" : { \"Id\" : Id , \"Locked\" : Boolea n , \"Enabled\" : Boolea n , \"MaxSpeed\" : Number , \"UpdateFrequency\" : TimeSpa n , \"StandbyThreshold\" : Number , \"PowerSavingThreshold\" : Number , \"PowerSavingMode\" : S tr i n g }, \"Relationships\" : [ ], \"Telemetry\" : { \"Battery\" : Number , \"Speed\" : Number , \"Position\" : GeoPosi t io n }, \"Components\" : { } }","title":"Model"},{"location":"Digital%20Twin%20Layer/Digital%20Twins.html#customer-dt","text":"","title":"Customer DT"},{"location":"Digital%20Twin%20Layer/Digital%20Twins.html#model_1","text":"{ \"Properties\" : { \"Id\" : Id }, \"Relationships\" : [ { \"displayName\" : \"uses\" , \"description\" : \"the customer is riding\" , \"target\" : Scoo ter , \"properties\" : { \"rentId\" : Id } } ], \"Telemetry\" : { }, \"Components\" : { } }","title":"Model"},{"location":"architecture-design/SUMMARY.html","text":"Service Architecture Component Diagram","title":"SUMMARY"},{"location":"architecture-design/component-diagram.html","text":"Component Diagram","title":"Component Diagram"},{"location":"architecture-design/component-diagram.html#component-diagram","text":"","title":"Component Diagram"},{"location":"architecture-design/component-diagram.html#_1","text":"","title":""},{"location":"architecture-design/service-architecture.html","text":"Service Architecture Domain Layer This is the core layer of any service and is responsible of defining all Entities belonging to the service and their associated behaviors. This layer can also define high level processes or constraints that are encapsulated inside Domain Services . Entities and domain services can notify the occurrence of any relevant state change using Domain Events . Contracts Layer Defines a set of External Events that are used by other microservices to react to state changes outside of their bounded context. These events are typically emitted by the Application Layer in response to internal domain events and expose a subset of the properties of the domain event itself. Application Layer Defines a collection of Handlers that encapsulate the use cases exposed by the service and acts as an entry point to the domain layer. This layer is also responsible of managing Authorization , data access, consistency and external communication by delegating to the Infrastructure Layer . To keep application logic as clean as possible, this communication uses Infrastructure Interfaces declared by the application layer itself, but implemented in Infrastructure . Infrastructure Layer This layer holds the concrete implementation of the technology-agnostic interfaces declared by the Application Layer or by the Domain Layer . These interfaces typically model behavior related to Persistence , External Communication and other Utility Services required by other layers. API Layer Represents the entry point that clients of the service use to make requests. Clients can make requests using the REST API exposed by each microservice, therefore this layer defines a set of Controllers that declare which endpoints are supported. In addition, this is where each service defines its DTOs (Data Transfer Objects, i.e. the objects modeling the format of communication with clients). Lastly, this layer is responsible of managing the Authentication process, delegating authorization to the Application Layer . Inter-Service dependencies Inter-service communication can happen with: Synchronous API calls from the Infrastructure layer to the recipient API layer Asynchronous Event notification received through the Application layer that adheres to the sender Contracts layer","title":"Service Architecture"},{"location":"architecture-design/service-architecture.html#service-architecture","text":"","title":"Service Architecture"},{"location":"architecture-design/service-architecture.html#domain-layer","text":"This is the core layer of any service and is responsible of defining all Entities belonging to the service and their associated behaviors. This layer can also define high level processes or constraints that are encapsulated inside Domain Services . Entities and domain services can notify the occurrence of any relevant state change using Domain Events .","title":"Domain Layer"},{"location":"architecture-design/service-architecture.html#contracts-layer","text":"Defines a set of External Events that are used by other microservices to react to state changes outside of their bounded context. These events are typically emitted by the Application Layer in response to internal domain events and expose a subset of the properties of the domain event itself.","title":"Contracts Layer"},{"location":"architecture-design/service-architecture.html#application-layer","text":"Defines a collection of Handlers that encapsulate the use cases exposed by the service and acts as an entry point to the domain layer. This layer is also responsible of managing Authorization , data access, consistency and external communication by delegating to the Infrastructure Layer . To keep application logic as clean as possible, this communication uses Infrastructure Interfaces declared by the application layer itself, but implemented in Infrastructure .","title":"Application Layer"},{"location":"architecture-design/service-architecture.html#infrastructure-layer","text":"This layer holds the concrete implementation of the technology-agnostic interfaces declared by the Application Layer or by the Domain Layer . These interfaces typically model behavior related to Persistence , External Communication and other Utility Services required by other layers.","title":"Infrastructure Layer"},{"location":"architecture-design/service-architecture.html#api-layer","text":"Represents the entry point that clients of the service use to make requests. Clients can make requests using the REST API exposed by each microservice, therefore this layer defines a set of Controllers that declare which endpoints are supported. In addition, this is where each service defines its DTOs (Data Transfer Objects, i.e. the objects modeling the format of communication with clients). Lastly, this layer is responsible of managing the Authentication process, delegating authorization to the Application Layer .","title":"API Layer"},{"location":"architecture-design/service-architecture.html#inter-service-dependencies","text":"Inter-service communication can happen with: Synchronous API calls from the Infrastructure layer to the recipient API layer Asynchronous Event notification received through the Application layer that adheres to the sender Contracts layer","title":"Inter-Service dependencies"},{"location":"domain-analysis/SUMMARY.html","text":"Bounded Contexts Context Mapping Domain Models","title":"SUMMARY"},{"location":"domain-analysis/bounded-contexts.html","text":"Bounded Contexts E-Scooter Subdomain Core Subdomain Scooter Control & Monitor Context One of the core contexts. Responsible for keeping track of scooter positions, battery level and other useful data coming from the physical devices. Provides the operation of locking and unlocking on a scooter to other contexts and it's considered the ground truth on this data. Also responsible for defining control policies and apply them operating on the physical devices, like power save, max speed, that depend only on the scooter physical state. Responsible for physical actuation of all the remote operations on the scooter. Area of Service Context Keeps track of service areas, scooter-area bindings and scooter position in order to detect when a scooter is crossing the area boundary and notify the other contexts when that happen. Scooter Data Context Storage of e-scooters technical and logical static information, like ID, serial number, dimensions, weight... Is the ground truth on the identity of a scooter. Rent Subdomain Core Subdomain Rent Context Manages the renting operations including storing data on which scooters are rented and by whom. Provides the interface for searching and renting scooters. Manages the logic enabling and disabling of a scooter and provides an interface to do that. Trip Context Data collection about trips done by all customers such as starting points, duration, travelled kilometers. Rent Payment Context Responsible for managing the payment policy for customer rents. Authorizes the renting operation by checking in with the payment context. Insight Subdomain Core Subdomain Drop points Planning Context Exploits usage data from other contexts to compute drop point locations or suggestions. Stores data about user search requests about scooters. Payment Subdomain Supporting Subdomain Payment Context Manages all customer in-app transactions, virtual currency, and triggers real-world transactions. User Subdomain Generic Subdomain Customer Context Keeps track of customers anagraphic data. Authentication Context Manages login data and role based authentication for all people that use the service, including admins, assistants and customers.","title":"Bounded Contexts"},{"location":"domain-analysis/bounded-contexts.html#bounded-contexts","text":"","title":"Bounded Contexts"},{"location":"domain-analysis/bounded-contexts.html#e-scooter-subdomain","text":"Core Subdomain","title":"E-Scooter Subdomain"},{"location":"domain-analysis/bounded-contexts.html#scooter-control-monitor-context","text":"One of the core contexts. Responsible for keeping track of scooter positions, battery level and other useful data coming from the physical devices. Provides the operation of locking and unlocking on a scooter to other contexts and it's considered the ground truth on this data. Also responsible for defining control policies and apply them operating on the physical devices, like power save, max speed, that depend only on the scooter physical state. Responsible for physical actuation of all the remote operations on the scooter.","title":"Scooter Control &amp; Monitor Context"},{"location":"domain-analysis/bounded-contexts.html#area-of-service-context","text":"Keeps track of service areas, scooter-area bindings and scooter position in order to detect when a scooter is crossing the area boundary and notify the other contexts when that happen.","title":"Area of Service Context"},{"location":"domain-analysis/bounded-contexts.html#scooter-data-context","text":"Storage of e-scooters technical and logical static information, like ID, serial number, dimensions, weight... Is the ground truth on the identity of a scooter.","title":"Scooter Data Context"},{"location":"domain-analysis/bounded-contexts.html#rent-subdomain","text":"Core Subdomain","title":"Rent Subdomain"},{"location":"domain-analysis/bounded-contexts.html#rent-context","text":"Manages the renting operations including storing data on which scooters are rented and by whom. Provides the interface for searching and renting scooters. Manages the logic enabling and disabling of a scooter and provides an interface to do that.","title":"Rent Context"},{"location":"domain-analysis/bounded-contexts.html#trip-context","text":"Data collection about trips done by all customers such as starting points, duration, travelled kilometers.","title":"Trip Context"},{"location":"domain-analysis/bounded-contexts.html#rent-payment-context","text":"Responsible for managing the payment policy for customer rents. Authorizes the renting operation by checking in with the payment context.","title":"Rent Payment Context"},{"location":"domain-analysis/bounded-contexts.html#insight-subdomain","text":"Core Subdomain","title":"Insight Subdomain"},{"location":"domain-analysis/bounded-contexts.html#drop-points-planning-context","text":"Exploits usage data from other contexts to compute drop point locations or suggestions. Stores data about user search requests about scooters.","title":"Drop points Planning Context"},{"location":"domain-analysis/bounded-contexts.html#payment-subdomain","text":"Supporting Subdomain","title":"Payment Subdomain"},{"location":"domain-analysis/bounded-contexts.html#payment-context","text":"Manages all customer in-app transactions, virtual currency, and triggers real-world transactions.","title":"Payment Context"},{"location":"domain-analysis/bounded-contexts.html#user-subdomain","text":"Generic Subdomain","title":"User Subdomain"},{"location":"domain-analysis/bounded-contexts.html#customer-context","text":"Keeps track of customers anagraphic data.","title":"Customer Context"},{"location":"domain-analysis/bounded-contexts.html#authentication-context","text":"Manages login data and role based authentication for all people that use the service, including admins, assistants and customers.","title":"Authentication Context"},{"location":"domain-analysis/context-mapping.html","text":"Context Mapping Context Map","title":"Context Mapping"},{"location":"domain-analysis/context-mapping.html#context-mapping","text":"","title":"Context Mapping"},{"location":"domain-analysis/context-mapping.html#context-map","text":"","title":"Context Map"},{"location":"domain-analysis/domain-models/common/common-types.html","text":"Common Types EntityId EntityId represents how the identity of entities is passed in the system enabling the possibility to distinguish between one another of the same kind. Percentage percentage represents the level of a source as number in [0,1]. Constraints : \\(0 <= base1Value <= 1\\) \\(base100Value = round(base1Value * 100)\\) Speed metersPerSecond and kilometersPerHour are two different units for the same speed value. Constraints : \\(metersPerSecond = kilometersPerHour / 3.6\\) \\(metersPerSecond >= 0\\) Name Constraints : \\(len(value) > 0\\) Latitude Constraints : \\(value > -90 and value < 90\\) Longitude Constraints : \\(value > -180 and value < 180\\) GeoPoint Distance Constraints : \\(kilometers >= 0\\) Timestamp value is the number of milliseconds passed since 01/01/1970 00:00:00 (Epoch) Duration milliseconds is the number of milliseconds. Constraints : \\(milliseconds >= 0\\) DomainError Nothing Result","title":"Common Types"},{"location":"domain-analysis/domain-models/common/common-types.html#common-types","text":"","title":"Common Types"},{"location":"domain-analysis/domain-models/common/common-types.html#entityid","text":"EntityId represents how the identity of entities is passed in the system enabling the possibility to distinguish between one another of the same kind.","title":"EntityId"},{"location":"domain-analysis/domain-models/common/common-types.html#percentage","text":"percentage represents the level of a source as number in [0,1]. Constraints : \\(0 <= base1Value <= 1\\) \\(base100Value = round(base1Value * 100)\\)","title":"Percentage"},{"location":"domain-analysis/domain-models/common/common-types.html#speed","text":"metersPerSecond and kilometersPerHour are two different units for the same speed value. Constraints : \\(metersPerSecond = kilometersPerHour / 3.6\\) \\(metersPerSecond >= 0\\)","title":"Speed"},{"location":"domain-analysis/domain-models/common/common-types.html#name","text":"Constraints : \\(len(value) > 0\\)","title":"Name"},{"location":"domain-analysis/domain-models/common/common-types.html#latitude","text":"Constraints : \\(value > -90 and value < 90\\)","title":"Latitude"},{"location":"domain-analysis/domain-models/common/common-types.html#longitude","text":"Constraints : \\(value > -180 and value < 180\\)","title":"Longitude"},{"location":"domain-analysis/domain-models/common/common-types.html#geopoint","text":"","title":"GeoPoint"},{"location":"domain-analysis/domain-models/common/common-types.html#distance","text":"Constraints : \\(kilometers >= 0\\)","title":"Distance"},{"location":"domain-analysis/domain-models/common/common-types.html#timestamp","text":"value is the number of milliseconds passed since 01/01/1970 00:00:00 (Epoch)","title":"Timestamp"},{"location":"domain-analysis/domain-models/common/common-types.html#duration","text":"milliseconds is the number of milliseconds. Constraints : \\(milliseconds >= 0\\)","title":"Duration"},{"location":"domain-analysis/domain-models/common/common-types.html#domainerror","text":"","title":"DomainError"},{"location":"domain-analysis/domain-models/common/common-types.html#nothing","text":"","title":"Nothing"},{"location":"domain-analysis/domain-models/common/common-types.html#result","text":"","title":"Result"},{"location":"domain-analysis/domain-models/e-scooter/area-of-service.html","text":"Area of Service Domain Model Class Diagram Domain Events AreaCreated : emitted when an area is created AreaDeleted : emitted when an area is deleted ScooterAssignedToArea : emitted when a scooter is set to belong to a certain area of service. ScooterRemovedFromArea : emitted when a scooter is set to not belong to any area. AreaShapeChanged : emitted when the shape of an area of service is changed. ScooterWentOutsideArea : emitted when a scooter that belongs to an area is moved outside of its shape. ScooterReturnedInsideArea : emitted when a scooter returns inside its area of service after having moved out.","title":"Area of Service Domain Model"},{"location":"domain-analysis/domain-models/e-scooter/area-of-service.html#area-of-service-domain-model","text":"","title":"Area of Service Domain Model"},{"location":"domain-analysis/domain-models/e-scooter/area-of-service.html#class-diagram","text":"","title":"Class Diagram"},{"location":"domain-analysis/domain-models/e-scooter/area-of-service.html#domain-events","text":"AreaCreated : emitted when an area is created AreaDeleted : emitted when an area is deleted ScooterAssignedToArea : emitted when a scooter is set to belong to a certain area of service. ScooterRemovedFromArea : emitted when a scooter is set to not belong to any area. AreaShapeChanged : emitted when the shape of an area of service is changed. ScooterWentOutsideArea : emitted when a scooter that belongs to an area is moved outside of its shape. ScooterReturnedInsideArea : emitted when a scooter returns inside its area of service after having moved out.","title":"Domain Events"},{"location":"domain-analysis/domain-models/e-scooter/scooter-control.html","text":"Scooter Control Domain Model Class Diagram Details PowerMode Represents all the possible power-related modes a scooter can have. Battery Power Mode Manager The Power Mode State Diagram: Domain Events ScooterUnlocked : emitted when a scooter is unlocked ScooterLocked : emitted when a scooter is locked ScooterPowerModeChanged : emitted when the power mode of a scooter is changed ScooterMaxSpeedChanged : emitted when the max speed of a scooter is changed ScooterEnabled : emitted when a scooter is enabled ScooterDisabled : emitted when a scooter is disabled","title":"Scooter Control Domain Model"},{"location":"domain-analysis/domain-models/e-scooter/scooter-control.html#scooter-control-domain-model","text":"","title":"Scooter Control Domain Model"},{"location":"domain-analysis/domain-models/e-scooter/scooter-control.html#class-diagram","text":"","title":"Class Diagram"},{"location":"domain-analysis/domain-models/e-scooter/scooter-control.html#details","text":"","title":"Details"},{"location":"domain-analysis/domain-models/e-scooter/scooter-control.html#powermode","text":"Represents all the possible power-related modes a scooter can have.","title":"PowerMode"},{"location":"domain-analysis/domain-models/e-scooter/scooter-control.html#battery","text":"","title":"Battery"},{"location":"domain-analysis/domain-models/e-scooter/scooter-control.html#power-mode-manager","text":"The Power Mode State Diagram:","title":"Power Mode Manager"},{"location":"domain-analysis/domain-models/e-scooter/scooter-control.html#domain-events","text":"ScooterUnlocked : emitted when a scooter is unlocked ScooterLocked : emitted when a scooter is locked ScooterPowerModeChanged : emitted when the power mode of a scooter is changed ScooterMaxSpeedChanged : emitted when the max speed of a scooter is changed ScooterEnabled : emitted when a scooter is enabled ScooterDisabled : emitted when a scooter is disabled","title":"Domain Events"},{"location":"domain-analysis/domain-models/e-scooter/scooter-data.html","text":"Scooter Data Domain Model Class Diagram Details Scooter SerialNumber Constraints : ^[A-Za-z0-9-]+$ Weight Constraints : \\(kilograms > 0\\) ModelInfo Domain events ScooterCreated : emitted when a new scooter is registered to the system. ScooterDeleted : emitted when a scooter is removed from the system.","title":"Scooter Data Domain Model"},{"location":"domain-analysis/domain-models/e-scooter/scooter-data.html#scooter-data-domain-model","text":"","title":"Scooter Data Domain Model"},{"location":"domain-analysis/domain-models/e-scooter/scooter-data.html#class-diagram","text":"","title":"Class Diagram"},{"location":"domain-analysis/domain-models/e-scooter/scooter-data.html#details","text":"","title":"Details"},{"location":"domain-analysis/domain-models/e-scooter/scooter-data.html#scooter","text":"","title":"Scooter"},{"location":"domain-analysis/domain-models/e-scooter/scooter-data.html#serialnumber","text":"Constraints : ^[A-Za-z0-9-]+$","title":"SerialNumber"},{"location":"domain-analysis/domain-models/e-scooter/scooter-data.html#weight","text":"Constraints : \\(kilograms > 0\\)","title":"Weight"},{"location":"domain-analysis/domain-models/e-scooter/scooter-data.html#modelinfo","text":"","title":"ModelInfo"},{"location":"domain-analysis/domain-models/e-scooter/scooter-data.html#domain-events","text":"ScooterCreated : emitted when a new scooter is registered to the system. ScooterDeleted : emitted when a scooter is removed from the system.","title":"Domain events"},{"location":"domain-analysis/domain-models/e-scooter/scooter-physical-control.html","text":"Scooter Physical Control Domain Model Class Diagram Details Scooter Exposes the possible action to do on the physical Scooter. All the actions are idempotent. Domain Events","title":"Scooter Physical Control Domain Model"},{"location":"domain-analysis/domain-models/e-scooter/scooter-physical-control.html#scooter-physical-control-domain-model","text":"","title":"Scooter Physical Control Domain Model"},{"location":"domain-analysis/domain-models/e-scooter/scooter-physical-control.html#class-diagram","text":"","title":"Class Diagram"},{"location":"domain-analysis/domain-models/e-scooter/scooter-physical-control.html#details","text":"","title":"Details"},{"location":"domain-analysis/domain-models/e-scooter/scooter-physical-control.html#scooter","text":"Exposes the possible action to do on the physical Scooter. All the actions are idempotent.","title":"Scooter"},{"location":"domain-analysis/domain-models/e-scooter/scooter-physical-control.html#domain-events","text":"","title":"Domain Events"},{"location":"domain-analysis/domain-models/insight/drop-points-planning.html","text":"Drop Points Planning Domain Class Diagram Details Drop Point A drop point is a GeoPoint representing a suggested spot where to place some scooters. Domain Events","title":"Drop Points Planning Domain"},{"location":"domain-analysis/domain-models/insight/drop-points-planning.html#drop-points-planning-domain","text":"","title":"Drop Points Planning Domain"},{"location":"domain-analysis/domain-models/insight/drop-points-planning.html#class-diagram","text":"","title":"Class Diagram"},{"location":"domain-analysis/domain-models/insight/drop-points-planning.html#details","text":"","title":"Details"},{"location":"domain-analysis/domain-models/insight/drop-points-planning.html#drop-point","text":"A drop point is a GeoPoint representing a suggested spot where to place some scooters.","title":"Drop Point"},{"location":"domain-analysis/domain-models/insight/drop-points-planning.html#domain-events","text":"","title":"Domain Events"},{"location":"domain-analysis/domain-models/rent/rent-payment.html","text":"Rent Payment Domain Model Class Diagram Details Rent Process Diagram Domain Events RentAuthorized : RentNotAuthorized : CreditExhaustedForRent :","title":"Rent Payment Domain Model"},{"location":"domain-analysis/domain-models/rent/rent-payment.html#rent-payment-domain-model","text":"","title":"Rent Payment Domain Model"},{"location":"domain-analysis/domain-models/rent/rent-payment.html#class-diagram","text":"","title":"Class Diagram"},{"location":"domain-analysis/domain-models/rent/rent-payment.html#details","text":"","title":"Details"},{"location":"domain-analysis/domain-models/rent/rent-payment.html#rent-process-diagram","text":"","title":"Rent Process Diagram"},{"location":"domain-analysis/domain-models/rent/rent-payment.html#domain-events","text":"RentAuthorized : RentNotAuthorized : CreditExhaustedForRent :","title":"Domain Events"},{"location":"domain-analysis/domain-models/rent/rent.html","text":"Rent Domain Model Class Diagram Details Rent Constraints : \\(confirmation.date + confirmation.maxEnd >= end.date \\text{ if } \\exists end\\) \\(\\exists confirmation \\text{ if } \\exists end\\) Domain Events RentRequested : RentConfirmed : RentStopped : RentCanceled :","title":"Rent Domain Model"},{"location":"domain-analysis/domain-models/rent/rent.html#rent-domain-model","text":"","title":"Rent Domain Model"},{"location":"domain-analysis/domain-models/rent/rent.html#class-diagram","text":"","title":"Class Diagram"},{"location":"domain-analysis/domain-models/rent/rent.html#details","text":"","title":"Details"},{"location":"domain-analysis/domain-models/rent/rent.html#rent","text":"Constraints : \\(confirmation.date + confirmation.maxEnd >= end.date \\text{ if } \\exists end\\) \\(\\exists confirmation \\text{ if } \\exists end\\)","title":"Rent"},{"location":"domain-analysis/domain-models/rent/rent.html#domain-events","text":"RentRequested : RentConfirmed : RentStopped : RentCanceled :","title":"Domain Events"},{"location":"domain-analysis/domain-models/rent/trip.html","text":"Trip Domain Model Class Diagram Domain Events TripStarted : TripEnded :","title":"Trip Domain Model"},{"location":"domain-analysis/domain-models/rent/trip.html#trip-domain-model","text":"","title":"Trip Domain Model"},{"location":"domain-analysis/domain-models/rent/trip.html#class-diagram","text":"","title":"Class Diagram"},{"location":"domain-analysis/domain-models/rent/trip.html#domain-events","text":"TripStarted : TripEnded :","title":"Domain Events"},{"location":"domain-exploration/SUMMARY.html","text":"Business Problem Analysis Ubiquitous Language","title":"SUMMARY"},{"location":"domain-exploration/business-problem-analysis.html","text":"Business Problem Analysis To kick-off the knowledge crunching process the first discussion with the stakeholders is focused on the identification of the business needs to derive how it might be possible to create a software system that could fit in with those and make the company gain business value from the solution. While doing so the analysts start developing the Ubiquitous Language in parallel, to write down the definition of the different domain terms and have a clear understanding of the vocabulary in the domain space. Stakeholders Interview What is the problem that you're trying to solve by adopting a new software solution? We would like to increase the average number of E-scooter rents in a day. What are the possible factors that influence that? Electric scooters have batteries that run out during the day, we often are not able to recharge them until night so we progressively lose available scooters as the day goes on. Do you think there is a way to save some battery during the day to make the scooter last longer? Speed is the main factor that drain the scooter battery. If you want to go fast the motor consumes more energy, maybe speed control might be a thing to look into. Also it's very important that scooters with a low level of battery don't turn off because we can loose the tracking. About that, should the users be prevented from picking up very low battery scooters? Yes we would like that so we don't encounter problems. Also we would like to be very upfront with our customers about the information about the scooter when they need to choose one: if you need to do a long trip the worst thing that can happen is to have your scooter stop at some point and need to find another one. Why is it hard to recover and recharge a scooter? We scatter scooters around the city and then let people wander and drop them off wherever they like, sometimes they can be pretty far away from each other and make the recovering process tedious and costly to do during the day. If it was easier do you think you would be able to recharge some drained scooter and put them back as available? Yes it should be doable, the scooters take about 3 hours to recharge and then they are ready to go again. What else do you think can improve the number of rents? We noticed that not all scooters are used in the same way. In some areas they are quickly depleted whilst in some others they stay basically fully charged and sometime we recover them in the same spot where we dropped them. Also the same scooter can travel a long distance either by a lot of short trips or very long ones depending on the area but we have little data on that. How do you choose where to place your scooters? Right now we're going by trial and error basically, and then we try to note down which places are the best. If one day we see that all the scooters in a spot have been used we try to put some more in the next one. Our objective is that if you need a scooter you should never have to walk too much to find one. Impact Mapping The result of the interview is summed up into an impact map, identifying the root problem and different possible features of interest that raised from the discussion. Theese can be later further developed through the analysis of the usecases and evolve in the system requirements.","title":"Business Problem Analysis"},{"location":"domain-exploration/business-problem-analysis.html#business-problem-analysis","text":"To kick-off the knowledge crunching process the first discussion with the stakeholders is focused on the identification of the business needs to derive how it might be possible to create a software system that could fit in with those and make the company gain business value from the solution. While doing so the analysts start developing the Ubiquitous Language in parallel, to write down the definition of the different domain terms and have a clear understanding of the vocabulary in the domain space.","title":"Business Problem Analysis"},{"location":"domain-exploration/business-problem-analysis.html#stakeholders-interview","text":"What is the problem that you're trying to solve by adopting a new software solution? We would like to increase the average number of E-scooter rents in a day. What are the possible factors that influence that? Electric scooters have batteries that run out during the day, we often are not able to recharge them until night so we progressively lose available scooters as the day goes on. Do you think there is a way to save some battery during the day to make the scooter last longer? Speed is the main factor that drain the scooter battery. If you want to go fast the motor consumes more energy, maybe speed control might be a thing to look into. Also it's very important that scooters with a low level of battery don't turn off because we can loose the tracking. About that, should the users be prevented from picking up very low battery scooters? Yes we would like that so we don't encounter problems. Also we would like to be very upfront with our customers about the information about the scooter when they need to choose one: if you need to do a long trip the worst thing that can happen is to have your scooter stop at some point and need to find another one. Why is it hard to recover and recharge a scooter? We scatter scooters around the city and then let people wander and drop them off wherever they like, sometimes they can be pretty far away from each other and make the recovering process tedious and costly to do during the day. If it was easier do you think you would be able to recharge some drained scooter and put them back as available? Yes it should be doable, the scooters take about 3 hours to recharge and then they are ready to go again. What else do you think can improve the number of rents? We noticed that not all scooters are used in the same way. In some areas they are quickly depleted whilst in some others they stay basically fully charged and sometime we recover them in the same spot where we dropped them. Also the same scooter can travel a long distance either by a lot of short trips or very long ones depending on the area but we have little data on that. How do you choose where to place your scooters? Right now we're going by trial and error basically, and then we try to note down which places are the best. If one day we see that all the scooters in a spot have been used we try to put some more in the next one. Our objective is that if you need a scooter you should never have to walk too much to find one.","title":"Stakeholders Interview"},{"location":"domain-exploration/business-problem-analysis.html#impact-mapping","text":"The result of the interview is summed up into an impact map, identifying the root problem and different possible features of interest that raised from the discussion. Theese can be later further developed through the analysis of the usecases and evolve in the system requirements.","title":"Impact Mapping"},{"location":"domain-exploration/ubiquitous-language.html","text":"Ubiquitous Language E-Scooter service A service that allows customers to rent electric scooters placed in public areas for a trip within the boundaries of an area of service . Electric Scooter Aliases: e-scooter, scooter Motorized vehicle with two wheels, usable by a person standing on it. It's equipped with some sensors and other devices. E-Scooter equipment Electric engine Uses power from the battery to power the front wheel spin. Wheels and tires The scooter runs on two wheels with air-inflated tires; the front wheel containes a rotating electric engine . Battery Scooter power supply; rechargeable; electric; has finite capacity, power... GPS sensor Global Positioning System; estimates a position on Earth by negotiating it with satellites; based on a free service; works better in open places Speedometer Measures speed using wheel rotations. Accelerometer Measures acceleration forces along the three axis Electronic wheel block Aliases: electric break, electric block If turned on, the wheel becomes very hard to rotate Headlight Light source embedded in the front to enable night usage Manual Breaks Aliases: Breaks, default breaks, disk breaks, rear break Friction based stopping system; Placed on the back wheel; Controlled by a hand lever. Accelerator Handle that controls the speed; If the handle isn't turned the electric break is activated. Speaker A device that can play sounds and can be remotely activated. Mode Aliases: State One of the possible states in which the scooter can be. In each mode, the scooter has a different behavior. Active mode A mode in which the scooter has no electric limit on power. Power Saving mode A mode in which the scooter uses a lower maximum speed to limit power consuption. This happens after the battery gets below a threshold Power Saving threshold The battery level below which the scooter enters Power Saving mode. Standby mode A mode in which the scooter must be disabled due to extremely low battery. Standby threshold The battery level below which the scooter enters Standby mode. Operations Unlock To turn off the electric block Lock To turn on the electric block . Ride Use the scooter to move. Disable To deny the possibility that a customer rents a scooter. Enable To allow the possibility that a customer rents a scooter if the business policies allow it. Maintain Repair any damage and/or recharge the battery. Rent As a customer , paying or exploiting a subscription for unlocking an e-scooter . This action lasts until the scooter is locked again (in normal conditions). Assign to area An e-scooter can be assigned to an area if, from that moment, that e-scooter mutually exclusively belongs to that area . Recover See recovery . Ring Make the speaker play a ringtone, useful to find it. Relationships Belong to area The e-scooter can be only rented and ridden inside that area . Customer Alias: user. A customer for the e-scooter service . Anagraphic information Collection of data about the customer, including first name, date of birth, and all the other possible information useful for the e-scooter service . Subscription A customer has it if they are able to rent e-scooters without paying upfront. Admin Works for the E-Scooter Service . Monitors and manages scooters from a control dashboard. Recovery The act of picking up an e-scooter , providing maintenance and dropping it somewhere inside the area of service sometime later. The scooter may be unlocked if necessary. Recovery assistant Aliases: assistant Works for the e-scooter service and does recoveries with a recovery van . Recovery van A vehicle that allows assistants to recover e-scooters . Map Bidimensional, polar representation of the Earth surface. Shows, for example, streets, buildings, water courses; what scooters can or cannot cross. Area of service Aliases: Service Area The map portion inside which e-scooters assigned to it can be rented. Drop Point A place of interest, inside an area of service, where electric scooter are usually dropped after recovery . Trip Information about a rent period, during and after its lasting. Properties Rider The rider is the customer that rents the e-scooter during the trip. Vehicle The scooter used for transportation. Distance The distance, in meters, traveled during the trip. Start position Aliases: start A point inside the area of service where the vehicle was unlocked . End position Aliases: end A point inside the map where the vehicle was locked because the rent ended. Payment A payment can be either: - a real-world payment - an in-app payment Payment legacy system The preexisting service that manages customer data and payments for the e-scooter service . Virtual Currency The amount of imaginary money for every customer. Used to pay scooter rents . It can be obtained through real-world purchases . In-App Payment Aliases: in-app purchase It's a virtual currency transaction inside the system. Real-world payment Aliases: real-world purchase It's a money transaction from the customer to the business bank account.","title":"Ubiquitous Language"},{"location":"domain-exploration/ubiquitous-language.html#ubiquitous-language","text":"","title":"Ubiquitous Language"},{"location":"domain-exploration/ubiquitous-language.html#e-scooter-service","text":"A service that allows customers to rent electric scooters placed in public areas for a trip within the boundaries of an area of service .","title":"E-Scooter service"},{"location":"domain-exploration/ubiquitous-language.html#electric-scooter","text":"Aliases: e-scooter, scooter Motorized vehicle with two wheels, usable by a person standing on it. It's equipped with some sensors and other devices.","title":"Electric Scooter"},{"location":"domain-exploration/ubiquitous-language.html#e-scooter-equipment","text":"","title":"E-Scooter equipment"},{"location":"domain-exploration/ubiquitous-language.html#electric-engine","text":"Uses power from the battery to power the front wheel spin.","title":"Electric engine"},{"location":"domain-exploration/ubiquitous-language.html#wheels-and-tires","text":"The scooter runs on two wheels with air-inflated tires; the front wheel containes a rotating electric engine .","title":"Wheels and tires"},{"location":"domain-exploration/ubiquitous-language.html#battery","text":"Scooter power supply; rechargeable; electric; has finite capacity, power...","title":"Battery"},{"location":"domain-exploration/ubiquitous-language.html#gps-sensor","text":"Global Positioning System; estimates a position on Earth by negotiating it with satellites; based on a free service; works better in open places","title":"GPS sensor"},{"location":"domain-exploration/ubiquitous-language.html#speedometer","text":"Measures speed using wheel rotations.","title":"Speedometer"},{"location":"domain-exploration/ubiquitous-language.html#accelerometer","text":"Measures acceleration forces along the three axis","title":"Accelerometer"},{"location":"domain-exploration/ubiquitous-language.html#electronic-wheel-block","text":"Aliases: electric break, electric block If turned on, the wheel becomes very hard to rotate","title":"Electronic wheel block"},{"location":"domain-exploration/ubiquitous-language.html#headlight","text":"Light source embedded in the front to enable night usage","title":"Headlight"},{"location":"domain-exploration/ubiquitous-language.html#manual-breaks","text":"Aliases: Breaks, default breaks, disk breaks, rear break Friction based stopping system; Placed on the back wheel; Controlled by a hand lever.","title":"Manual Breaks"},{"location":"domain-exploration/ubiquitous-language.html#accelerator","text":"Handle that controls the speed; If the handle isn't turned the electric break is activated.","title":"Accelerator"},{"location":"domain-exploration/ubiquitous-language.html#speaker","text":"A device that can play sounds and can be remotely activated.","title":"Speaker"},{"location":"domain-exploration/ubiquitous-language.html#mode","text":"Aliases: State One of the possible states in which the scooter can be. In each mode, the scooter has a different behavior.","title":"Mode"},{"location":"domain-exploration/ubiquitous-language.html#active-mode","text":"A mode in which the scooter has no electric limit on power.","title":"Active mode"},{"location":"domain-exploration/ubiquitous-language.html#power-saving-mode","text":"A mode in which the scooter uses a lower maximum speed to limit power consuption. This happens after the battery gets below a threshold","title":"Power Saving mode"},{"location":"domain-exploration/ubiquitous-language.html#power-saving-threshold","text":"The battery level below which the scooter enters Power Saving mode.","title":"Power Saving threshold"},{"location":"domain-exploration/ubiquitous-language.html#standby-mode","text":"A mode in which the scooter must be disabled due to extremely low battery.","title":"Standby mode"},{"location":"domain-exploration/ubiquitous-language.html#standby-threshold","text":"The battery level below which the scooter enters Standby mode.","title":"Standby threshold"},{"location":"domain-exploration/ubiquitous-language.html#operations","text":"","title":"Operations"},{"location":"domain-exploration/ubiquitous-language.html#unlock","text":"To turn off the electric block","title":"Unlock"},{"location":"domain-exploration/ubiquitous-language.html#lock","text":"To turn on the electric block .","title":"Lock"},{"location":"domain-exploration/ubiquitous-language.html#ride","text":"Use the scooter to move.","title":"Ride"},{"location":"domain-exploration/ubiquitous-language.html#disable","text":"To deny the possibility that a customer rents a scooter.","title":"Disable"},{"location":"domain-exploration/ubiquitous-language.html#enable","text":"To allow the possibility that a customer rents a scooter if the business policies allow it.","title":"Enable"},{"location":"domain-exploration/ubiquitous-language.html#maintain","text":"Repair any damage and/or recharge the battery.","title":"Maintain"},{"location":"domain-exploration/ubiquitous-language.html#rent","text":"As a customer , paying or exploiting a subscription for unlocking an e-scooter . This action lasts until the scooter is locked again (in normal conditions).","title":"Rent"},{"location":"domain-exploration/ubiquitous-language.html#assign-to-area","text":"An e-scooter can be assigned to an area if, from that moment, that e-scooter mutually exclusively belongs to that area .","title":"Assign to area"},{"location":"domain-exploration/ubiquitous-language.html#recover","text":"See recovery .","title":"Recover"},{"location":"domain-exploration/ubiquitous-language.html#ring","text":"Make the speaker play a ringtone, useful to find it.","title":"Ring"},{"location":"domain-exploration/ubiquitous-language.html#relationships","text":"","title":"Relationships"},{"location":"domain-exploration/ubiquitous-language.html#belong-to-area","text":"The e-scooter can be only rented and ridden inside that area .","title":"Belong to area"},{"location":"domain-exploration/ubiquitous-language.html#customer","text":"Alias: user. A customer for the e-scooter service .","title":"Customer"},{"location":"domain-exploration/ubiquitous-language.html#anagraphic-information","text":"Collection of data about the customer, including first name, date of birth, and all the other possible information useful for the e-scooter service .","title":"Anagraphic information"},{"location":"domain-exploration/ubiquitous-language.html#subscription","text":"A customer has it if they are able to rent e-scooters without paying upfront.","title":"Subscription"},{"location":"domain-exploration/ubiquitous-language.html#admin","text":"Works for the E-Scooter Service . Monitors and manages scooters from a control dashboard.","title":"Admin"},{"location":"domain-exploration/ubiquitous-language.html#recovery","text":"The act of picking up an e-scooter , providing maintenance and dropping it somewhere inside the area of service sometime later. The scooter may be unlocked if necessary.","title":"Recovery"},{"location":"domain-exploration/ubiquitous-language.html#recovery-assistant","text":"Aliases: assistant Works for the e-scooter service and does recoveries with a recovery van .","title":"Recovery assistant"},{"location":"domain-exploration/ubiquitous-language.html#recovery-van","text":"A vehicle that allows assistants to recover e-scooters .","title":"Recovery van"},{"location":"domain-exploration/ubiquitous-language.html#map","text":"Bidimensional, polar representation of the Earth surface. Shows, for example, streets, buildings, water courses; what scooters can or cannot cross.","title":"Map"},{"location":"domain-exploration/ubiquitous-language.html#area-of-service","text":"Aliases: Service Area The map portion inside which e-scooters assigned to it can be rented.","title":"Area of service"},{"location":"domain-exploration/ubiquitous-language.html#drop-point","text":"A place of interest, inside an area of service, where electric scooter are usually dropped after recovery .","title":"Drop Point"},{"location":"domain-exploration/ubiquitous-language.html#trip","text":"Information about a rent period, during and after its lasting.","title":"Trip"},{"location":"domain-exploration/ubiquitous-language.html#properties","text":"","title":"Properties"},{"location":"domain-exploration/ubiquitous-language.html#rider","text":"The rider is the customer that rents the e-scooter during the trip.","title":"Rider"},{"location":"domain-exploration/ubiquitous-language.html#vehicle","text":"The scooter used for transportation.","title":"Vehicle"},{"location":"domain-exploration/ubiquitous-language.html#distance","text":"The distance, in meters, traveled during the trip.","title":"Distance"},{"location":"domain-exploration/ubiquitous-language.html#start-position","text":"Aliases: start A point inside the area of service where the vehicle was unlocked .","title":"Start position"},{"location":"domain-exploration/ubiquitous-language.html#end-position","text":"Aliases: end A point inside the map where the vehicle was locked because the rent ended.","title":"End position"},{"location":"domain-exploration/ubiquitous-language.html#payment","text":"A payment can be either: - a real-world payment - an in-app payment","title":"Payment"},{"location":"domain-exploration/ubiquitous-language.html#payment-legacy-system","text":"The preexisting service that manages customer data and payments for the e-scooter service .","title":"Payment legacy system"},{"location":"domain-exploration/ubiquitous-language.html#virtual-currency","text":"The amount of imaginary money for every customer. Used to pay scooter rents . It can be obtained through real-world purchases .","title":"Virtual Currency"},{"location":"domain-exploration/ubiquitous-language.html#in-app-payment","text":"Aliases: in-app purchase It's a virtual currency transaction inside the system.","title":"In-App Payment"},{"location":"domain-exploration/ubiquitous-language.html#real-world-payment","text":"Aliases: real-world purchase It's a money transaction from the customer to the business bank account.","title":"Real-world payment"},{"location":"requirement-analysis/index.html","text":"Analysis Process Result","title":"Analysis Process"},{"location":"requirement-analysis/index.html#analysis-process","text":"","title":"Analysis Process"},{"location":"requirement-analysis/index.html#result","text":"","title":"Result"},{"location":"requirement-analysis/SUMMARY.html","text":"Use Cases","title":"SUMMARY"},{"location":"requirement-analysis/use-cases.html","text":"Use Cases User stories Some user stories are taken from end users and some other are taken from the business representative, business employees. 1a - Search of a scooter As a customer, I want to open the mobile application and search for free scooters in my area. 1b - Choose and find a scooter As a customer, I want to be able to select a scooter near myself and make it ring in order to find it if it's hidden. 1c - Rent a scooter As a customer, I want to confirm on my phone and start riding. When I'm done, I want to leave the scooter where I can and confirm the end of the trip on the app. 2 - Battery level As a customer, when I'm searching a scooter, I want to know its battery level in advance. 3a - Area of service policy When a scooter is taken out of the area of service borders, it locks. 3b - Customer notification of the area border As a customer, when I'm approaching the area of service border, I want to be warned about the possibility that my scooter gets locked. How do you want to get warned? I'd like the scooter to play a specific sound, while I get a notification on my phone. 4 - Power save policy When the battery goes below a threshold, the scooter enters a power save mode, during which it runs slower than normal. 5 - Customer notification of battery usage As a customer, I want to be warned when the battery is running low. I want to be warned with a ringtone. 6 - Battery exhausted policy When the battery is running low, the scooter warns the customer, if present, that the run must end and enters a standby mode during which it's disabled. 7 - Monitoring of scooters As the business manager, I want to be able to see the position and the battery level of every scooter in a map. 8 - Insights from the system As the business manager, I want to get suggestions about strategic places for the drop points of the next day. 9 - Unlock policy for employees. As a business employee I want to be able to unlock freely the scooters in order to move them. 10 - Vandalism prevention The scooter should discourage theft and vandalism by playing a message when moved while locked or disabled. 11 - Integration with legacy payment system As the business manager, I want the customers to pay for rides through the existing system. Does the legacy system keep track of all customers data? If I remember correctly, yes. From the legacy system documentation: The legacy payment system needs access to trip data and to customers rent/unlock requests. Story Diagrams Story #1 Diagram","title":"Use Cases"},{"location":"requirement-analysis/use-cases.html#use-cases","text":"","title":"Use Cases"},{"location":"requirement-analysis/use-cases.html#user-stories","text":"Some user stories are taken from end users and some other are taken from the business representative, business employees.","title":"User stories"},{"location":"requirement-analysis/use-cases.html#1a-search-of-a-scooter","text":"As a customer, I want to open the mobile application and search for free scooters in my area.","title":"1a - Search of a scooter"},{"location":"requirement-analysis/use-cases.html#1b-choose-and-find-a-scooter","text":"As a customer, I want to be able to select a scooter near myself and make it ring in order to find it if it's hidden.","title":"1b - Choose and find a scooter"},{"location":"requirement-analysis/use-cases.html#1c-rent-a-scooter","text":"As a customer, I want to confirm on my phone and start riding. When I'm done, I want to leave the scooter where I can and confirm the end of the trip on the app.","title":"1c - Rent a scooter"},{"location":"requirement-analysis/use-cases.html#2-battery-level","text":"As a customer, when I'm searching a scooter, I want to know its battery level in advance.","title":"2 - Battery level"},{"location":"requirement-analysis/use-cases.html#3a-area-of-service-policy","text":"When a scooter is taken out of the area of service borders, it locks.","title":"3a - Area of service policy"},{"location":"requirement-analysis/use-cases.html#3b-customer-notification-of-the-area-border","text":"As a customer, when I'm approaching the area of service border, I want to be warned about the possibility that my scooter gets locked. How do you want to get warned? I'd like the scooter to play a specific sound, while I get a notification on my phone.","title":"3b - Customer notification of the area border"},{"location":"requirement-analysis/use-cases.html#4-power-save-policy","text":"When the battery goes below a threshold, the scooter enters a power save mode, during which it runs slower than normal.","title":"4 - Power save policy"},{"location":"requirement-analysis/use-cases.html#5-customer-notification-of-battery-usage","text":"As a customer, I want to be warned when the battery is running low. I want to be warned with a ringtone.","title":"5 - Customer notification of battery usage"},{"location":"requirement-analysis/use-cases.html#6-battery-exhausted-policy","text":"When the battery is running low, the scooter warns the customer, if present, that the run must end and enters a standby mode during which it's disabled.","title":"6 - Battery exhausted policy"},{"location":"requirement-analysis/use-cases.html#7-monitoring-of-scooters","text":"As the business manager, I want to be able to see the position and the battery level of every scooter in a map.","title":"7 - Monitoring of scooters"},{"location":"requirement-analysis/use-cases.html#8-insights-from-the-system","text":"As the business manager, I want to get suggestions about strategic places for the drop points of the next day.","title":"8 - Insights from the system"},{"location":"requirement-analysis/use-cases.html#9-unlock-policy-for-employees","text":"As a business employee I want to be able to unlock freely the scooters in order to move them.","title":"9 - Unlock policy for employees."},{"location":"requirement-analysis/use-cases.html#10-vandalism-prevention","text":"The scooter should discourage theft and vandalism by playing a message when moved while locked or disabled.","title":"10 - Vandalism prevention"},{"location":"requirement-analysis/use-cases.html#11-integration-with-legacy-payment-system","text":"As the business manager, I want the customers to pay for rides through the existing system. Does the legacy system keep track of all customers data? If I remember correctly, yes. From the legacy system documentation: The legacy payment system needs access to trip data and to customers rent/unlock requests.","title":"11 - Integration with legacy payment system"},{"location":"requirement-analysis/use-cases.html#story-diagrams","text":"","title":"Story Diagrams"},{"location":"requirement-analysis/use-cases.html#story-1-diagram","text":"","title":"Story #1 Diagram"}]}; var __search = { index: Promise.resolve(local_index) }